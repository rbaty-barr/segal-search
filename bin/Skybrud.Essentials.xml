<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Skybrud.Essentials</name>
    </assembly>
    <members>
        <member name="T:Skybrud.Essentials.Collections.Extensions.EnumerableExtensions">
            <summary>
            Static class with extensions methods for instances of <code>IEnumerable</code>.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Collections.SortOrder">
            <summary>
            Enum class representing the sort order of a collection.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Collections.SortOrder.Ascending">
            <summary>
            Indicates that items are sorted in ascending order.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Collections.SortOrder.Descending">
            <summary>
            Indicates that items are sorted in descending order.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Common.PropertyNotSetException">
            <summary>
            Class representing an exception for a property that is not set.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Common.PropertyNotSetException.#ctor(System.String)">
            <summary>
            Initializes a new exception for the property with the specified <code>propertyName</code>.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:Skybrud.Essentials.Common.PropertyNotSetException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new exception for the property with the specified <code>propertyName</code>.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="P:Skybrud.Essentials.Common.PropertyNotSetException.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Common.PropertyNotSetException.Message">
            <summary>
            Gets the message of the exception.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Enums.EnumUtils">
            <summary>
            Utility class with various static helper methods for working with enums.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumUtils.GetEnumValues``1">
            <summary>
            Gets an array of all values of the specified enum class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the enum class.</typeparam>
            <returns>Returns an array of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumUtils.ParseEnum``1(System.String)">
            <summary>
            Parses the specified <code>str</code> into the enum of type <typeparamref name="T"/>. If <code>str</code>
            cannot be parsed, an exception of type <see cref="T:Skybrud.Essentials.Enums.EnumParseException"/> will be thrown instead.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="str">The string to be parsed.</param>
            <returns>Returns an enum of type <typeparamref name="T"/> from the specified <code>str</code>.</returns>
            <exception cref="T:System.ArgumentNullException">If <code>str</code> is <code>null</code> (or white space).</exception>
            <exception cref="T:System.ArgumentException">If <typeparamref name="T"/> is not an enum class.</exception>
            <exception cref="T:Skybrud.Essentials.Enums.EnumParseException">If <code>str</code> doesn't match any of the values of
            <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumUtils.ParseEnum(System.String,System.Type)">
            <summary>
            Converts the specified <paramref name="str"/> into an instance of <paramref name="enumType"/>.
            </summary>
            <param name="str">The string value to be converted.</param>
            <param name="enumType"></param>
            <returns>Returns an instance of <paramref name="enumType"/>.</returns>
            <exception cref="T:Skybrud.Essentials.Enums.EnumParseException">If <paramref name="enumType"/> didn't match an enum value as specified
            in <paramref name="str"/>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumUtils.ParseEnum``1(System.String,``0)">
            <summary>
            Parses the specified <code>str</code> into the enum of type <typeparamref name="T"/>. If <code>str</code>
            cannot be parsed, the value <code>fallback</code> will be returned instead.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="str">The string to be parsed.</param>
            <param name="fallback">The fallback if the enum could not be parsed.</param>
            <returns>Returns an enum of type <typeparamref name="T"/> from the specified <code>str</code>.</returns>
            <exception cref="T:System.ArgumentException">If <typeparamref name="T"/> is not an enum class.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumUtils.TryParseEnum``1(System.String,``0@)">
            <summary>
            Converts the string representation of the name or numeric value to an enum of type
            <typeparamref name="T"/>. The return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="str">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="value">When this method returns, contains an object of type <typeparamref name="T"/> whose
            value is represented by value. This parameter is passed uninitialized.</param>
            <returns>Returns <code>true</code> if the value parameter was converted successfully; otherwise,
            <code>false</code>.</returns>
            <exception cref="T:System.ArgumentException">If <typeparamref name="T"/> is not an enum class.</exception>
        </member>
        <member name="T:Skybrud.Essentials.Json.JsonUtils">
            <summary>
            Utility class with various static helper methods for working with JSON.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.ParseJsonObject(System.String)">
            <summary>
            Parses the specified <code>json</code> string into an instance <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <param name="json">The JSON string to be parsed.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.ParseJsonObject``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Parses the specified <code>json</code> string into an instance of <code>T</code>.
            </summary>
            <typeparam name="T">The type to be returned.</typeparam>
            <param name="json">The JSON string to be parsed.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an instance of <code>T</code> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.LoadJsonObject(System.String)">
            <summary>
            Loads and parses the JSON object in the file at the specified <code>path</code>.
            </summary>
            <param name="path">The path to the JSON file.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.LoadJsonObject``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Loads and parses the JSON object in the file at the specified <code>path</code>.
            </summary>
            <typeparam name="T">The type to be returned.</typeparam>
            <param name="path">The path to the JSON file.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an instance of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.ParseJsonArray(System.String)">
            <summary>
            Parses the specified <code>json</code> string into an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="json">The JSON string to be parsed.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.ParseJsonArray``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Parses the specified <code>json</code> string into an array of <code>T</code>.
            </summary>
            <param name="json">The JSON string to be parsed.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an array of <code>T</code> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.LoadJsonArray(System.String)">
            <summary>
            Loads and parses the JSON array in the file at the specified <code>path</code>.
            </summary>
            <param name="path">The path to the JSON file.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.LoadJsonArray``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Loads and parses the JSON object in the file at the specified <code>path</code>.
            </summary>
            <typeparam name="T">The type to be returned.</typeparam>
            <param name="path">The path to the JSON file.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an instance of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.SaveJsonObject(System.String,Skybrud.Essentials.Json.JsonObjectBase)">
            <summary>
            Saves the specified <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.SaveJsonObject(System.String,Skybrud.Essentials.Json.JsonObjectBase,Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.SaveJsonObject(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Saves the specified <see cref="T:Newtonsoft.Json.Linq.JObject"/> to the file at <code>path</code>. If the file doesn't already
            exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.SaveJsonObject(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified <see cref="T:Newtonsoft.Json.Linq.JObject"/> to the file at <code>path</code>. If the file doesn't already
            exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.SaveJsonArray(System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Saves the specified <see cref="T:Newtonsoft.Json.Linq.JArray"/> to the file at <code>path</code>. If the file doesn't already
            exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.SaveJsonArray(System.String,Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified <see cref="T:Newtonsoft.Json.Linq.JArray"/> to the file at <code>path</code>. If the file doesn't already
            exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.SaveJsonArray(System.String,Newtonsoft.Json.Linq.JToken[])">
            <summary>
            Saves the specified array of <see cref="T:Newtonsoft.Json.Linq.JToken"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The array of <see cref="T:Newtonsoft.Json.Linq.JToken"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.SaveJsonArray(System.String,Newtonsoft.Json.Linq.JToken[],Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified array of <see cref="T:Newtonsoft.Json.Linq.JToken"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The array of <see cref="T:Newtonsoft.Json.Linq.JToken"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.SaveJsonArray(System.String,Skybrud.Essentials.Json.JsonObjectBase[])">
            <summary>
            Saves the specified array of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file
            doesn't already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The array of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonUtils.SaveJsonArray(System.String,Skybrud.Essentials.Json.JsonObjectBase[],Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified array of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file
            doesn't already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The array of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="T:Skybrud.Essentials.Enums.EnumHelper">
            <summary>
            Utility class with various static helper methods for working with enums.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumHelper.GetEnumValues``1">
            <summary>
            Gets an array of all values of the specified enum class <code>T</code>.
            </summary>
            <typeparam name="T">The type of the enum class.</typeparam>
            <returns>Returns an array of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumHelper.ParseEnum``1(System.String)">
            <summary>
            Parses the specified <code>str</code> into the enum of type <code>T</code>. If <code>str</code> cannot be
            parsed, an exception of type <see cref="T:Skybrud.Essentials.Enums.EnumParseException"/> will be thrown instead.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="str">The string to be parsed.</param>
            <returns>Returns an enum of type <code>T</code> from the specified <code>str</code>.</returns>
            <exception cref="T:System.ArgumentNullException">If <code>str</code> is <code>null</code> (or white space).</exception>
            <exception cref="T:System.ArgumentException">If <code>T</code> is not an enum class.</exception>
            <exception cref="T:Skybrud.Essentials.Enums.EnumParseException">If <code>str</code> doesn't match any of the values of <code>T</code>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumHelper.ParseEnum``1(System.String,``0)">
            <summary>
            Parses the specified <code>str</code> into the enum of type <code>T</code>. If <code>str</code> cannot be
            parsed, the value <code>fallback</code> will be returned instead.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="str">The string to be parsed.</param>
            <param name="fallback">The fallback if the enum could not be parsed.</param>
            <returns>Returns an enum of type <code>T</code> from the specified <code>str</code>.</returns>
            <exception cref="T:System.ArgumentException">If <code>T</code> is not an enum class.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumHelper.TryParseEnum``1(System.String,``0@)">
            <summary>
            Converts the string representation of the name or numeric value to an enum of type <code>T</code>. The
            return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="str">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="value">When this method returns, contains an object of type <code>T</code> whose value is
            represented by value. This parameter is passed uninitialized.</param>
            <returns>Returns <code>true</code> if the value parameter was converted successfully; otherwise,
            <code>false</code>.</returns>
            <exception cref="T:System.ArgumentException">If <code>T</code> is not an enum class.</exception>
        </member>
        <member name="T:Skybrud.Essentials.Enums.EnumHelpers">
            <summary>
            Utility class with various static helper methods for working with enums.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumHelpers.GetEnumValues``1">
            <summary>
            Gets an array of all values of the specified enum class <code>T</code>.
            </summary>
            <typeparam name="T">The type of the enum class.</typeparam>
            <returns>Returns an array of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumHelpers.ParseEnum``1(System.String)">
            <summary>
            Parses the specified <code>str</code> into the enum of type <code>T</code>.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="str">The string to be parsed.</param>
            <returns>Returns an enum of type <code>T</code> from the specified <code>str</code>.</returns>
            <exception cref="T:System.ArgumentNullException">If <code>str</code> is <code>null</code> (or white space).</exception>
            <exception cref="T:System.ArgumentException">If <code>T</code> is not an enum class.</exception>
            <exception cref="T:Skybrud.Essentials.Enums.EnumParseException">If <code>str</code> doesn't match any of the values of <code>T</code>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumHelpers.ParseEnum``1(System.String,``0)">
            <summary>
            Parses the specified <code>str</code> into the enum of type <code>T</code>.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="str">The string to be parsed.</param>
            <param name="fallback">The fallback if the enum could not be parsed.</param>
            <returns>Returns an enum of type <code>T</code> from the specified <code>str</code>.</returns>
            <exception cref="T:System.ArgumentException">If <code>T</code> is not an enum class.</exception>
        </member>
        <member name="T:Skybrud.Essentials.Enums.EnumParseException">
            <summary>
            Class representing an exception for when a string cant be parsed into an enum value.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Enums.EnumParseException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new exception based on the specified <code>type</code> and <code>value</code>.
            </summary>
            <param name="type">The type of the enum.</param>
            <param name="value">The invalid value.</param>
        </member>
        <member name="P:Skybrud.Essentials.Enums.EnumParseException.Type">
            <summary>
            Gets the <see cref="P:Skybrud.Essentials.Enums.EnumParseException.Type"/> of the enum.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Enums.EnumParseException.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Enums.EnumParseException.Message">
            <summary>
            Gets the message of the exception.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Json.Converters.Enums.EnumBaseCaseConverter">
            <summary>
            Abstract class serving as a base converter for other enum converters in Skybrud.Essentials.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.Converters.Enums.EnumBaseCaseConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.Converters.Enums.EnumBaseCaseConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Converters.Enums.EnumBaseCaseConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns><code>true</code> if this instance can convert the specified object type; otherwise
            <code>false</code>.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Json.Converters.Enums.EnumPascalCaseConverter">
            <summary>
            JSON converter for serializing an enum value into a Pascal cased string.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Json.Converters.Enums.EnumCamelCaseConverter">
            <summary>
            JSON converter for serializing an enum value into a camel cased string.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.Converters.Enums.EnumCamelCaseConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Skybrud.Essentials.Json.Converters.Enums.EnumLowerCaseConverter">
            <summary>
            JSON converter for serializing an enum value into a lower case string.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.Converters.Enums.EnumLowerCaseConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Skybrud.Essentials.Json.Converters.Time.DateTimeUnixTimeConverter">
            <summary>
            Converts an instance of <see cref="T:System.DateTime"/> to and from a Unix timestamp.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Json.Converters.Time.UnixTimeConverter">
            <summary>
            Converts an instance of either <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> or <see cref="T:System.DateTime"/> to and from a Unix timestamp.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.Converters.Time.UnixTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.Converters.Time.UnixTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Converters.Time.UnixTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>Returns <code>true</code> if this instance can convert the specified object type; otherwise, <code>false</code>.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Json.Converters.Time.EssentialsDateTimeConverter">
            <summary>
            Converts an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.Converters.Time.EssentialsDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.Converters.Time.EssentialsDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Converters.Time.EssentialsDateTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>Returns <code>true</code> if this instance can convert the specified object type; otherwise, <code>false</code>.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Json.Converters.Time.EssentialsDateTimeUnixTimeConverter">
            <summary>
            Converts an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> to and from a Unix timestamp.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Json.Extensions.JArrayExtensions">
            <summary>
            Various extensions methods for <see cref="T:Newtonsoft.Json.Linq.JArray"/> that makes manual parsing easier.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetObject(Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Gets an object from the item at the specified <code>index</code> in the array.
            </summary>
            <param name="array">The parent array.</param>
            <param name="index">The index of the item.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>, or <code>null</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetObject``1(Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Gets an object from the item at the specified <code>index</code> in the array. If an object is found, it is
            parsed to the type of <code>T</code>.
            </summary>
            <param name="array">The parent array.</param>
            <param name="index">The index of the item.</param>
            <returns>Returns an instance of <code>T</code>, or the default value of <code>T</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetObject``1(Newtonsoft.Json.Linq.JArray,System.Int32,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Gets an object from the item at the specified <code>index</code> in the array. If an object is found, the
            object is parsed using the specified delegate <code>func</code>.
            </summary>
            <param name="array">The parent array.</param>
            <param name="index">The index of the item.</param>
            <param name="func">The delegate (callback method) used for parsing the object.</param>
            <returns>Returns an instance of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetObject(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Gets an object from token matching the specified <code>path</code>.
            </summary>
            <param name="array">The parent array.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>, or <code>null</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetObject``1(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Gets an object from token matching the specified <code>path</code>. If an object is found, it is
            parsed to the type of <code>T</code>.
            </summary>
            <param name="array">The parent array.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <code>T</code>, or the default value of <code>T</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetObject``1(Newtonsoft.Json.Linq.JArray,System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Gets an object from token matching the specified <code>path</code>. If an object is found, the object is
            parsed using the specified delegate <code>func</code>.
            </summary>
            <param name="array">The parent array.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="func">The delegate (callback method) used for parsing the object.</param>
            <returns>Returns an instance of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetString(Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Gets a string from the item at the specified <code>index</code> in the array.
            </summary>
            <param name="array">The parent array.</param>
            <param name="index">The index of the item.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetString(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Gets a string from the token matching the specified <code>path</code>.
            </summary>
            <param name="array">The parent array.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.String"/>, or <code>null</code> if <code>path</code> didn't match any tokens.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetInt32(Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of the item at the specified <code>index</code> in the array.
            </summary>
            <param name="array">The parent array.</param>
            <param name="index">The index of the item.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetInt32(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of the token matching the specified <code>path</code>, or
            <code>0</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="array">The parent array.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetInt64(Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int64"/> value of the item at the specified <code>index</code> in the array.
            </summary>
            <param name="array">The parent array.</param>
            <param name="index">The index of the item.</param>
            <returns>Returns an instance of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetInt64(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Gets the <see cref="T:System.Int64"/> value of the token matching the specified <code>path</code>.
            </summary>
            <param name="array">The parent array.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetDouble(Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Gets the <see cref="T:System.Double"/> value of the item at the specified <code>index</code> in the array.
            </summary>
            <param name="array">The parent array.</param>
            <param name="index">The index of the item.</param>
            <returns>Returns an instance of <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetDouble(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Gets the <see cref="T:System.Double"/> value of the token matching the specified <code>path</code>.
            </summary>
            <param name="array">The parent array.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetBoolean(Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of the item at the specified <code>index</code> in the array.
            </summary>
            <param name="array">The parent array.</param>
            <param name="index">The index of the item.</param>
            <returns>Returns an instance of <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetBoolean(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of the token matching the specified <code>path</code>.
            </summary>
            <param name="array">The parent array.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetArray(Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Gets an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the item at the specified <code>index</code> in the array.
            </summary>
            <param name="array">The parent array.</param>
            <param name="index">The index of the item.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetArray``1(Newtonsoft.Json.Linq.JArray,System.Int32,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Gets an array of <code>T</code> from the item at the specified <code>index</code> in the array using the
            specified delegate <code>func</code> for parsing each item in the array.
            </summary>
            <param name="array">The parent array.</param>
            <param name="index">The index of the item.</param>
            <param name="func">The delegate (callback method) used for parsing each item in the array.</param>
            <returns>Returns an array of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetArray(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Gets an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specified <code>path</code>.
            </summary>
            <param name="array">The parent array.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JArrayExtensions.GetArray``1(Newtonsoft.Json.Linq.JArray,System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Gets an array of <code>T</code> from the from the token matching the specified <code>path</code> in the array using the
            specified delegate <code>func</code> for parsing each item in the array.
            </summary>
            <param name="array">The parent array.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="func">The delegate (callback method) used for parsing each item in the array.</param>
            <returns>Returns an array of <code>T</code>.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Json.Extensions.JObjectExtension">
            <summary>
            Various extensions methods for <see cref="T:Newtonsoft.Json.Linq.JObject"/> that makes manual parsing easier.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.HasValue(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets whether a token matching the specified <code>path</code> exists and isn't <code>null</code> (or an empty string).
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns <code>true</code> if the property exists and the value isn't <code>null</code>, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetObject(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an object from a token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>, or <code>null</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetObject``1(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an object from a token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <code>T</code>, or the default value of <code>T</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetObject``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Gets an object from a token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="func">The delegate (callback method) used for parsing the object.</param>
            <returns>Returns an instance of <code>T</code>, or the default value of <code>T</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetString(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the string value of the token matching the specified <code>path</code>, or <code>null</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.String"/>, or <code>null</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetString``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.String,``0})">
            <summary>
            Gets the value of the token matching the specified <code>path</code>, or <code>null</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">The callback used for converting the string value.</param>
            <returns>Returns an instance of <code>T</code>, or <code>null</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetInt32(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of the token matching the specified <code>path</code>, or
            <code>0</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetInt32``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Int32,``0})">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of the token matching the specified <code>path</code> and parses
            it into an instance of <code>T</code>, or the default value of <code>T</code> if <code>path</code> doesn't
            match a token.
            </summary>
            <typeparam name="T">The type of the parsed type.</typeparam>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">The callback used for converting the integer value.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/>, or <code>0</code> if <code>path</code> doesn't
            match a token.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetInt64(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Int64"/> value of the token matching the specified <code>path</code>, or
            <code>0</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetInt64``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Int64,``0})">
            <summary>
            Gets the <see cref="T:System.Int64"/> value of the token matching the specified <code>path</code> and parses
            it into an instance of <code>T</code>, or the default value of <code>T</code> if <code>path</code> doesn't
            match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">The callback used for converting the token value.</param>
            <returns>Returns an instance of <see cref="T:System.Int64"/>, or <code>0</code> if <code>path</code> doesn't
            match a token.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetFloat(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Single"/> value of the token matching the specified <code>path</code>, or
            <code>0</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetFloat``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Single,``0})">
            <summary>
            Gets the <see cref="T:System.Single"/> value of the token matching the specified <code>path</code> and parses
            it into an instance of <code>T</code>, or the default value of <code>T</code> if <code>path</code> doesn't
            match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an instance of <see cref="T:System.Single"/>, or <code>0</code> if <code>path</code> doesn't
            match a token.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetDouble(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Double"/> value of the token matching the specified <code>path</code>, or
            <code>0</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetDouble``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Double,``0})">
            <summary>
            Gets the <see cref="T:System.Double"/> value of the token matching the specified <code>path</code> and parses
            it into an instance of <code>T</code>, or the default value of <code>T</code> if <code>path</code> doesn't
            match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an instance of <see cref="T:System.Double"/>, or <code>0</code> if <code>path</code> doesn't
            match a token.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetBoolean(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of the token matching the specified <code>path</code>, or
            <code>0</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetBoolean``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Boolean,``0})">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of the token matching the specified <code>path</code> and
            parses it into an instance of <code>T</code>, or the default value of <code>T</code> if <code>path</code>
            doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an instance of <see cref="T:System.Boolean"/>, or <code>false</code> if <code>path</code>
            doesn't match a token.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetEnum``1(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an enum of type <code>T</code> from the token matching the specified <code>path</code>.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetEnum``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
            Gets an enum of type <code>T</code> from the token matching the specified <code>path</code>.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="fallback">The fallback value if the value in the JSON couldn't be parsed.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetDateTime(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> from the value of the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the value of the property.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetDateTime(Newtonsoft.Json.Linq.JObject,System.String,System.Globalization.DateTimeStyles)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> from the value of the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that
            can be present in the property value for the parse operation to succeed and that defines how to interpret
            the parsed date in relation to the current time zone or the current date. A typical value to specify is
            <see cref="F:System.Globalization.DateTimeStyles.None"/>.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the value of the property.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetDateTime(Newtonsoft.Json.Linq.JObject,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> from the value of the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="provider">An object that supplies culture-specific formatting information about the property value.</param>
            <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that
            can be present in the property value for the parse operation to succeed and that defines how to interpret
            the parsed date in relation to the current time zone or the current date. A typical value to specify is
            <see cref="F:System.Globalization.DateTimeStyles.None"/>.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the value of the property.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetArray(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/>, or <code>null</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetArray``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Gets an array of <code>T</code> from a property with the specified <code>propertyName</code> using the
            specified delegate <code>func</code> for parsing each item in the array.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetArrayItems(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the items of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specfied <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an array of <see cref="T:Newtonsoft.Json.Linq.JToken"/>. If the a matching token isn't found, an empty array will
            still be returned.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetArrayItems``1(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the items of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specfied <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an array of <code>T</code>. If the a matching token isn't found, an empty array will
            still be returned.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetArrayItems``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JToken,``0})">
            <summary>
            Gets the items of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specfied <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an array of <code>T</code>. If the a matching token isn't found, an empty array will
            still be returned.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetArrayItems``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Gets the items of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specfied <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an array of <code>T</code>. If the a matching token isn't found, an empty array will
            still be returned.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetArrayItems``2(Newtonsoft.Json.Linq.JObject,System.String,System.Func{``0,``1})">
            <summary>
            Gets the items of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specfied <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an array of <typeparamref name="TValue"/>. If the a matching token isn't found, an empty
            array will still be returned.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetStringArray(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an array of <see cref="T:System.String"/> from the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns the token value as an array of <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetInt32Array(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an array of <see cref="T:System.Int32"/> from the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns the token value as an array of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetInt64Array(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an array of <see cref="T:System.Int64"/> from the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns the token value as an array of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtension.GetSimpleTypeTokenFromPath(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> at the specified <code>path</code>. If the type of <code>token</code> is
            either <see cref="F:Newtonsoft.Json.Linq.JTokenType.Object"/> or <see cref="F:Newtonsoft.Json.Linq.JTokenType.Array"/>, the method will return
            <code>null</code> instead.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JToken"/>, or <code>null</code>.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Json.Extensions.JObjectExtensions">
            <summary>
            Various extensions methods for <see cref="T:Newtonsoft.Json.Linq.JObject"/> that makes manual parsing easier.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.HasValue(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets whether a token matching the specified <code>path</code> exists and isn't <code>null</code> (or an empty string).
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns <code>true</code> if the property exists and the value isn't <code>null</code>, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetObject(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an object from a token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>, or <code>null</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetObject``1(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an object from a token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <code>T</code>, or the default value of <code>T</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetObject``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Gets an object from a token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="func">The delegate (callback method) used for parsing the object.</param>
            <returns>Returns an instance of <code>T</code>, or the default value of <code>T</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetString(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the string value of the token matching the specified <code>path</code>, or <code>null</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.String"/>, or <code>null</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetString``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.String,``0})">
            <summary>
            Gets the value of the token matching the specified <code>path</code>, or <code>null</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">The callback used for converting the string value.</param>
            <returns>Returns an instance of <code>T</code>, or <code>null</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetInt32(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of the token matching the specified <code>path</code>, or
            <code>0</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetInt32``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Int32,``0})">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of the token matching the specified <code>path</code> and parses
            it into an instance of <code>T</code>, or the default value of <code>T</code> if <code>path</code> doesn't
            match a token.
            </summary>
            <typeparam name="T">The type of the parsed type.</typeparam>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">The callback used for converting the integer value.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/>, or <code>0</code> if <code>path</code> doesn't
            match a token.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetInt64(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Int64"/> value of the token matching the specified <code>path</code>, or
            <code>0</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetInt64``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Int64,``0})">
            <summary>
            Gets the <see cref="T:System.Int64"/> value of the token matching the specified <code>path</code> and parses
            it into an instance of <code>T</code>, or the default value of <code>T</code> if <code>path</code> doesn't
            match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">The callback used for converting the token value.</param>
            <returns>Returns an instance of <see cref="T:System.Int64"/>, or <code>0</code> if <code>path</code> doesn't
            match a token.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetFloat(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Single"/> value of the token matching the specified <code>path</code>, or
            <code>0</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetFloat``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Single,``0})">
            <summary>
            Gets the <see cref="T:System.Single"/> value of the token matching the specified <code>path</code> and parses
            it into an instance of <code>T</code>, or the default value of <code>T</code> if <code>path</code> doesn't
            match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an instance of <see cref="T:System.Single"/>, or <code>0</code> if <code>path</code> doesn't
            match a token.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetDouble(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Double"/> value of the token matching the specified <code>path</code>, or
            <code>0</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetDouble``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Double,``0})">
            <summary>
            Gets the <see cref="T:System.Double"/> value of the token matching the specified <code>path</code> and parses
            it into an instance of <code>T</code>, or the default value of <code>T</code> if <code>path</code> doesn't
            match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an instance of <see cref="T:System.Double"/>, or <code>0</code> if <code>path</code> doesn't
            match a token.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetBoolean(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of the token matching the specified <code>path</code>, or
            <code>0</code> if <code>path</code> doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetBoolean``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{System.Boolean,``0})">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of the token matching the specified <code>path</code> and
            parses it into an instance of <code>T</code>, or the default value of <code>T</code> if <code>path</code>
            doesn't match a token.
            </summary>
            <param name="obj">The parent object.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an instance of <see cref="T:System.Boolean"/>, or <code>false</code> if <code>path</code>
            doesn't match a token.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetEnum``1(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an enum of type <code>T</code> from the token matching the specified <code>path</code>.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetEnum``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
            Gets an enum of type <code>T</code> from the token matching the specified <code>path</code>.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="fallback">The fallback value if the value in the JSON couldn't be parsed.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetDateTime(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> from the value of the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the value of the property.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetDateTime(Newtonsoft.Json.Linq.JObject,System.String,System.Globalization.DateTimeStyles)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> from the value of the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that
            can be present in the property value for the parse operation to succeed and that defines how to interpret
            the parsed date in relation to the current time zone or the current date. A typical value to specify is
            <see cref="F:System.Globalization.DateTimeStyles.None"/>.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the value of the property.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetDateTime(Newtonsoft.Json.Linq.JObject,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> from the value of the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="provider">An object that supplies culture-specific formatting information about the property value.</param>
            <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that
            can be present in the property value for the parse operation to succeed and that defines how to interpret
            the parsed date in relation to the current time zone or the current date. A typical value to specify is
            <see cref="F:System.Globalization.DateTimeStyles.None"/>.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the value of the property.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetArray(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/>, or <code>null</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetArray``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Gets an array of <code>T</code> from a property with the specified <code>propertyName</code> using the
            specified delegate <code>func</code> for parsing each item in the array.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetArrayItems(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the items of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specfied <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an array of <see cref="T:Newtonsoft.Json.Linq.JToken"/>. If the a matching token isn't found, an empty array will
            still be returned.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetArrayItems``1(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the items of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specfied <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an array of <code>T</code>. If the a matching token isn't found, an empty array will
            still be returned.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetArrayItems``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JToken,``0})">
            <summary>
            Gets the items of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specfied <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an array of <code>T</code>. If the a matching token isn't found, an empty array will
            still be returned.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetArrayItems``1(Newtonsoft.Json.Linq.JObject,System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Gets the items of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specfied <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an array of <code>T</code>. If the a matching token isn't found, an empty array will
            still be returned.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetArrayItems``2(Newtonsoft.Json.Linq.JObject,System.String,System.Func{``0,``1})">
            <summary>
            Gets the items of the <see cref="T:Newtonsoft.Json.Linq.JArray"/> from the token matching the specfied <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <param name="callback">A callback function used for parsing or converting the token value.</param>
            <returns>Returns an array of <typeparamref name="TValue"/>. If the a matching token isn't found, an empty
            array will still be returned.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetStringArray(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an array of <see cref="T:System.String"/> from the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns the token value as an array of <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetInt32Array(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an array of <see cref="T:System.Int32"/> from the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns the token value as an array of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetInt64Array(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets an array of <see cref="T:System.Int64"/> from the token matching the specified <code>path</code>.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns the token value as an array of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.Extensions.JObjectExtensions.GetSimpleTypeTokenFromPath(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken"/> at the specified <code>path</code>. If the type of <code>token</code> is
            either <see cref="F:Newtonsoft.Json.Linq.JTokenType.Object"/> or <see cref="F:Newtonsoft.Json.Linq.JTokenType.Array"/>, the method will return
            <code>null</code> instead.
            </summary>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="path">A <see cref="T:System.String"/> that contains a JPath expression.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JToken"/>, or <code>null</code>.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Json.JsonHelper">
            <summary>
            Utility class with various static helper methods for working with JSON.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.ParseJsonObject(System.String)">
            <summary>
            Parses the specified <code>json</code> string into an instance <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <param name="json">The JSON string to be parsed.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.ParseJsonObject``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Parses the specified <code>json</code> string into an instance of <code>T</code>.
            </summary>
            <typeparam name="T">The type to be returned.</typeparam>
            <param name="json">The JSON string to be parsed.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an instance of <code>T</code> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.LoadJsonObject(System.String)">
            <summary>
            Loads and parses the JSON object in the file at the specified <code>path</code>.
            </summary>
            <param name="path">The path to the JSON file.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.LoadJsonObject``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Loads and parses the JSON object in the file at the specified <code>path</code>.
            </summary>
            <typeparam name="T">The type to be returned.</typeparam>
            <param name="path">The path to the JSON file.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an instance of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.ParseJsonArray(System.String)">
            <summary>
            Parses the specified <code>json</code> string into an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="json">The JSON string to be parsed.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.ParseJsonArray``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Parses the specified <code>json</code> string into an array of <code>T</code>.
            </summary>
            <param name="json">The JSON string to be parsed.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an array of <code>T</code> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.LoadJsonArray(System.String)">
            <summary>
            Loads and parses the JSON array in the file at the specified <code>path</code>.
            </summary>
            <param name="path">The path to the JSON file.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.LoadJsonArray``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Loads and parses the JSON object in the file at the specified <code>path</code>.
            </summary>
            <typeparam name="T">The type to be returned.</typeparam>
            <param name="path">The path to the JSON file.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an instance of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.SaveJsonObject(System.String,Skybrud.Essentials.Json.JsonObjectBase)">
            <summary>
            Saves the specified <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.SaveJsonObject(System.String,Skybrud.Essentials.Json.JsonObjectBase,Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.SaveJsonObject(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Saves the specified <see cref="T:Newtonsoft.Json.Linq.JObject"/> to the file at <code>path</code>. If the file doesn't already
            exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.SaveJsonObject(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified <see cref="T:Newtonsoft.Json.Linq.JObject"/> to the file at <code>path</code>. If the file doesn't already
            exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.SaveJsonArray(System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Saves the specified <see cref="T:Newtonsoft.Json.Linq.JArray"/> to the file at <code>path</code>. If the file doesn't already
            exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.SaveJsonArray(System.String,Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified <see cref="T:Newtonsoft.Json.Linq.JArray"/> to the file at <code>path</code>. If the file doesn't already
            exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.SaveJsonArray(System.String,Newtonsoft.Json.Linq.JToken[])">
            <summary>
            Saves the specified array of <see cref="T:Newtonsoft.Json.Linq.JToken"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The array of <see cref="T:Newtonsoft.Json.Linq.JToken"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.SaveJsonArray(System.String,Newtonsoft.Json.Linq.JToken[],Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified array of <see cref="T:Newtonsoft.Json.Linq.JToken"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The array of <see cref="T:Newtonsoft.Json.Linq.JToken"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.SaveJsonArray(System.String,Skybrud.Essentials.Json.JsonObjectBase[])">
            <summary>
            Saves the specified array of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file
            doesn't already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The array of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelper.SaveJsonArray(System.String,Skybrud.Essentials.Json.JsonObjectBase[],Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified array of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file
            doesn't already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="array">The array of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="T:Skybrud.Essentials.Json.JsonHelpers">
            <summary>
            Utility class with various static helper methods for working with JSON.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.ParseJsonObject(System.String)">
            <summary>
            Parses the specified <code>json</code> string into an instance <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <param name="json">The JSON string to be parsed.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.ParseJsonObject``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Parses the specified <code>json</code> string into an instance of <code>T</code>.
            </summary>
            <typeparam name="T">The type to be returned.</typeparam>
            <param name="json">The JSON string to be parsed.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an instance of <code>T</code> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.LoadJsonObject(System.String)">
            <summary>
            Loads and parses the JSON object in the file at the specified <code>path</code>.
            </summary>
            <param name="path">The path to the JSON file.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.LoadJsonObject``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Loads and parses the JSON object in the file at the specified <code>path</code>.
            </summary>
            <typeparam name="T">The type to be returned.</typeparam>
            <param name="path">The path to the JSON file.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an instance of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.ParseJsonArray(System.String)">
            <summary>
            Parses the specified <code>json</code> string into an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="json">The JSON string to be parsed.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.ParseJsonArray``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Parses the specified <code>json</code> string into an array of <code>T</code>.
            </summary>
            <param name="json">The JSON string to be parsed.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an array of <code>T</code> parsed from the specified <code>json</code> string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.LoadJsonArray(System.String)">
            <summary>
            Loads and parses the JSON array in the file at the specified <code>path</code>.
            </summary>
            <param name="path">The path to the JSON file.</param>
            <returns>Returns an instance of <see cref="T:Newtonsoft.Json.Linq.JArray"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.LoadJsonArray``1(System.String,System.Func{Newtonsoft.Json.Linq.JObject,``0})">
            <summary>
            Loads and parses the JSON object in the file at the specified <code>path</code>.
            </summary>
            <typeparam name="T">The type to be returned.</typeparam>
            <param name="path">The path to the JSON file.</param>
            <param name="func">A callback function/method used for converting an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/> into an instance of <code>T</code>.</param>
            <returns>Returns an instance of <code>T</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.SaveJsonObject(System.String,Skybrud.Essentials.Json.JsonObjectBase)">
            <summary>
            Saves the specified <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.SaveJsonObject(System.String,Skybrud.Essentials.Json.JsonObjectBase,Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.SaveJsonObject(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Saves the specified <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonHelpers.SaveJsonObject(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Formatting)">
            <summary>
            Saves the specified <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to the file at <code>path</code>. If the file doesn't
            already exist, a new file will be created.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="obj">The instance of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/> to be saved.</param>
            <param name="formatting">The formatting to be used when saving the object.</param>
        </member>
        <member name="T:Skybrud.Essentials.Json.JsonObjectBase">
            <summary>
            Class representing an object that was parsed from an instance of <see cref="P:Skybrud.Essentials.Json.JsonObjectBase.JObject"/>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Json.JsonObjectBase.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Parses the specified <paramref name="obj"/> into an instance of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/>.
            </summary>
            <param name="obj">The instance of <see cref="P:Skybrud.Essentials.Json.JsonObjectBase.JObject"/> to be parsed.</param>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Json.JsonObjectBase"/>.</returns>
        </member>
        <member name="P:Skybrud.Essentials.Json.JsonObjectBase.JObject">
            <summary>
            Gets the internal <see cref="P:Skybrud.Essentials.Json.JsonObjectBase.JObject"/> the object was created from.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Locations.LocationHelper">
            <summary>
            Static utility class with helper methods related to locations.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Locations.LocationHelper.EarthEquatorialRadiusMeters">
            <summary>
            Gets the equatorial radius of Earth (in meters).
            
            Notice: When comparing with various online services, they seem to use 6378137 meters for the equatorial
            radius of Earth, while 6378136.6 meters for the equatorial radius is more precise.
            </summary>
            <see>
                <cref>https://web.archive.org/web/20130826043456/http://asa.usno.navy.mil/SecK/2011/Astronomical_Constants_2011.txt</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Locations.LocationHelper.GetDistance(Skybrud.Essentials.Locations.ILocation,Skybrud.Essentials.Locations.ILocation)">
            <summary>
            Calculates the distance in meters between two GPS locations.
            </summary>
            <param name="loc1">The first location.</param>
            <param name="loc2">The second location.</param>
            <returns>Returns the distance in meters between the two locations.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Locations.LocationHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance in meters between two GPS locations.
            </summary>
            <param name="lat1">The latitude of the first location.</param>
            <param name="lng1">The longitude of the first location.</param>
            <param name="lat2">The latitude of the second location.</param>
            <param name="lng2">The longitude of the second location.</param>
            <returns>Returns the distance in meters between the two locations.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Security.SecurityHelper">
            <summary>
            Static class with miscellaneous helper methods.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.Base64Encode(System.String)">
            <summary>
            Base64 encodes the specified <code>input</code> string.
            </summary>
            <param name="input">The input string to be encoded.</param>
            <returns>Returns the Base64 encoded string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.Base64Decode(System.String)">
            <summary>
            Base64 decodes the specified <code>input</code> string.
            </summary>
            <param name="input">The input string to be decoded.</param>
            <returns>Returns the Base64 decoded string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetMd5Hash(System.String)">
            <summary>
            Gets the MD5 hash of <code>input</code>, and returns that hash. The input string is converted
            using <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="input">The input string</param>
            <returns>Returns the hash as a 32-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetMd5Hash(System.String,System.Text.Encoding)">
            <summary>
            Gets the MD5 hash of <code>input</code>, and returns that hash. The input string is converted
            using <code>encoding</code>.
            </summary>
            <param name="input">The input string</param>
            <param name="encoding">The encoding to be used for the conversion.</param>
            <returns>Returns the hash as a 32-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetMd5HashFromFile(System.String)">
            <summary>
            Gets the MD5 hash of the file specified by the <code>path</code>. The hash is a 64-character
            hexadecimal number.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>Returns the hash as a 32-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetSha1Hash(System.String)">
            <summary>
            Gets the SHA1 hash of <code>input</code>, and returns that hash. The input string is converted
            using <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="input">The input string</param>
            <returns>Returns the hash as a 40-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetSha1Hash(System.String,System.Text.Encoding)">
            <summary>
            Gets the SHA1 hash of <code>input</code>, and returns that hash. The input string is converted
            using <code>encoding</code>.
            </summary>
            <param name="input">The input string</param>
            <param name="encoding">The encoding to be used for the conversion.</param>
            <returns>Returns the hash as a 40-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetSha1FromFile(System.String)">
            <summary>
            Gets the SHA1 hash of the file specified by the <code>path</code>. The hash is a 40-character
            hexadecimal number.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>Returns the hash as a 40-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetSha256Hash(System.String)">
            <summary>
            Gets the SHA256 hash of <code>input</code>, and returns that hash. The input string is converted using <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="input">The input string</param>
            <returns>Returns the hash as a 64-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetSha256Hash(System.String,System.Text.Encoding)">
            <summary>
            Gets the SHA256 hash of <code>input</code>, and returns that hash. The input string is converted using <code>encoding</code>.
            </summary>
            <param name="input">The input string</param>
            <param name="encoding">The encoding to be used for the conversion.</param>
            <returns>Returns the hash as a 64-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetSha256HashFromFile(System.String)">
            <summary>
            Gets the SHA256 hash of the file specified by the <code>path</code>. The hash is a 64-character
            hexadecimal number.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>Returns the hash as a 64-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetSha512Hash(System.String)">
            <summary>
            Gets the SHA512 hash of <code>input</code>, and returns that hash. The input string is converted using <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="input">The input string</param>
            <returns>Returns the hash as a 128-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetSha512Hash(System.String,System.Text.Encoding)">
            <summary>
            Gets the SHA512 hash of <code>input</code>, and returns that hash. The input string is converted using <code>encoding</code>.
            </summary>
            <param name="input">The input string</param>
            <param name="encoding">The encoding to be used for the conversion.</param>
            <returns>Returns the hash as a 128-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetSha512HashFromFile(System.String)">
            <summary>
            Gets the SHA512 hash of the file specified by the <code>path</code>. The hash is a 128-character
            hexadecimal number.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>Returns the hash as a 128-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Gets the hash of <code>input</code> using the specified <code>algorithm</code>.
            </summary>
            <param name="algorithm">The algorithm to be used.</param>
            <param name="input">The input string to be hashed.</param>
            <returns>Returns the hash as a hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetHash(System.Security.Cryptography.HashAlgorithm,System.String,System.Text.Encoding)">
            <summary>
            Gets the hash of <code>input</code> using the specified <code>algorithm</code>.
            </summary>
            <param name="algorithm">The algorithm to be used.</param>
            <param name="input">The input string to be hashed.</param>
            <param name="encoding">The encoding to be used.</param>
            <returns>Returns the hash as a hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityHelper.GetHashFromFile(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Gets the hash of the file specified by the <code>path</code> using the specified <code>algorithm</code>.
            </summary>
            <param name="algorithm">The algorithm to be used.</param>
            <param name="path">The path of the file.</param>
            <returns>Returns the hash as a 64-character hexadecimal number.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Strings.StringHelper">
            <summary>
            Utility class with various static helper methods for working with strings.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.ParseBoolean(System.String)">
            <summary>
            Parses the specified <code>str</code> into an instance of <see cref="T:System.Boolean"/>. The string is
            considered <code>true</code> if it matches either <code>1</code>, <code>t</code> or <code>true</code>
            (case insensitive).
            </summary>
            <param name="str">The string to be parsed.</param>
            <returns>Returns <code>true</code> if <code>str</code> matches either <code>true</code>, <code>1</code>
            or <code>t</code> (case insensitive).</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.ParseBoolean(System.Object)">
            <summary>
            Parses the specified <code>value</code> into an instance of <see cref="T:System.Boolean"/>. The value is
            considered <code>true</code> if it matches either <code>1</code>, <code>t</code> or <code>true</code>
            (case insensitive).
            </summary>
            <param name="value">The value to be parsed.</param>
            <returns>Returns <code>true</code> if <code>value</code> matches either <code>true</code>, <code>1</code>
            or <code>t</code> (case insensitive).</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.CsvToInt(System.String)">
            <summary>
            Converts a comma separated string into an array of integers.
            </summary>
            <param name="str">The comma separated string to be converted.</param>
            <returns>Returns an array of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.ToCamelCase(System.String)">
            <summary>
            Converts the specified <code>str</code> to camel case (also referred to as lower camel casing).
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the camel cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.ToCamelCase(System.Enum)">
            <summary>
            Converts the name of the specified enum <code>value</code> to a camel cased string.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the camel cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.ToPascalCase(System.String)">
            <summary>
            Converts the specified <code>str</code> to Pascal case (also referred to as upper camel casing).
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the Pascal cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.ToPascalCase(System.Enum)">
            <summary>
            Converts the name of the specified enum <code>value</code> to a Pascal cased string.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the Pascal cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.ToUnderscore(System.String)">
            <summary>
            Converts the specified <code>str</code> to a lower case string with words separated by underscores.
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the converted string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.ToUnderscore(System.Enum)">
            <summary>
            Converts the specified enum value to a lower case string with words separated by underscores.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the converted string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.FirstCharToUpper(System.String)">
            <summary>
            Uppercases the first character of a the specified <code>str</code>. If <code>str</code> is either
            <code>null</code> or empty, an empty string will be returned instead.
            </summary>
            <param name="str">The string which first character should be uppercased.</param>
            <returns>The input string with the first character has been uppercased.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.UrlEncode(System.String)">
            <summary>
            Encodes a URL string.
            </summary>
            <param name="str">The string to be encoded.</param>
            <returns>Returns the encoded string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelper.UrlDecode(System.String)">
            <summary>
            Decodes a URL string.
            </summary>
            <param name="str">The string to be decoded.</param>
            <returns>Returns the decoded string.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Strings.StringHelpers">
            <summary>
            Utility class with various static helper methods for working with strings.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.ParseBoolean(System.String)">
            <summary>
            Parses the specified <code>str</code> into an instance of <see cref="T:System.Boolean"/>. The string is
            considered <code>true</code> if it matches either <code>1</code>, <code>t</code> or <code>true</code>
            (case insensitive).
            </summary>
            <param name="str">The string to be parsed.</param>
            <returns>Returns <code>true</code> if <code>str</code> matches either <code>true</code>, <code>1</code>
            or <code>t</code> (case insensitive).</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.ParseBoolean(System.Object)">
            <summary>
            Parses the specified <code>value</code> into an instance of <see cref="T:System.Boolean"/>. The value is
            considered <code>true</code> if it matches either <code>1</code>, <code>t</code> or <code>true</code>
            (case insensitive).
            </summary>
            <param name="value">The value to be parsed.</param>
            <returns>Returns <code>true</code> if <code>value</code> matches either <code>true</code>, <code>1</code>
            or <code>t</code> (case insensitive).</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.CsvToInt(System.String)">
            <summary>
            Converts a comma separated string into an array of integers.
            </summary>
            <param name="str">The comma separated string to be converted.</param>
            <returns>Returns an array of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.ToCamelCase(System.String)">
            <summary>
            Converts the specified <code>str</code> to camel case (also referred to as lower camel casing).
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the camel cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.ToCamelCase(System.Enum)">
            <summary>
            Converts the name of the specified enum <code>value</code> to a camel cased string.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the camel cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.ToPascalCase(System.String)">
            <summary>
            Converts the specified <code>str</code> to Pascal case (also referred to as upper camel casing).
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the Pascal cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.ToPascalCase(System.Enum)">
            <summary>
            Converts the name of the specified enum <code>value</code> to a Pascal cased string.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the Pascal cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.ToUnderscore(System.String)">
            <summary>
            Converts the specified <code>str</code> to a lower case string with words separated by underscores.
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the converted string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.ToUnderscore(System.Enum)">
            <summary>
            Converts the specified enum value to a lower case string with words separated by underscores.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the converted string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.FirstCharToUpper(System.String)">
            <summary>
            Uppercases the first character of a the specified <code>str</code>. If <code>str</code> is either
            <code>null</code> or empty, an empty string will be returned instead.
            </summary>
            <param name="str">The string which first character should be uppercased.</param>
            <returns>The input string with the first character has been uppercased.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.UrlEncode(System.String)">
            <summary>
            Encodes a URL string.
            </summary>
            <param name="str">The string to be encoded.</param>
            <returns>Returns the encoded string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringHelpers.UrlDecode(System.String)">
            <summary>
            Decodes a URL string.
            </summary>
            <param name="str">The string to be decoded.</param>
            <returns>Returns the decoded string.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Xml.XmlHelpers">
            <summary>
            Static helper methods for working with XML.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlHelpers.ParseXmlElement(System.String)">
            <summary>
            Parses the specified <code>xml</code> into an instance of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="xml">The XML to be parsed.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlHelpers.ParseXmlElement``1(System.String,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Parses the specified <code>xml</code> into an instance of <see cref="T:System.Xml.Linq.XElement"/>, which is then converted
            into an instance of <code>T</code> using the specified <code>callback</code> function.
            </summary>
            <typeparam name="T">The type of the instance to be returned.</typeparam>
            <param name="xml">The XML to be parsed.</param>
            <param name="callback">The callback function used for converted the parsed <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>Returns an instance of <code>T</code> representing the specified <code>xml</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlHelpers.ParseXmlDocument(System.String)">
            <summary>
            Parses the specified <code>xml</code> into an instance of <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <param name="xml">The XML to be parsed.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XDocument"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlHelpers.ParseXmlDocument``1(System.String,System.Func{System.Xml.Linq.XDocument,``0})">
            <summary>
            Parses the specified <code>xml</code> into an instance of <see cref="T:System.Xml.Linq.XDocument"/>, which is then converted
            into an instance of <code>T</code> using the specified <code>callback</code> function.
            </summary>
            <typeparam name="T">The type of the instance to be returned.</typeparam>
            <param name="xml">The XML to be parsed.</param>
            <param name="callback">The callback function used for converted the parsed <see cref="T:System.Xml.Linq.XDocument"/>.</param>
            <returns>Returns an instance of <code>T</code> representing the specified <code>xml</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlHelpers.LoadXmlElement(System.String)">
            <summary>
            Loads the XML document at specified <code>path</code> and returns it as an instance of
            <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="path">The path to the XML document.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlHelpers.LoadXmlElement``1(System.String,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Loads the XML document at specified <code>path</code>, which is then converted into an instance of
            <code>T</code> using the specified <code>callback</code> function.
            </summary>
            <typeparam name="T">The type of the instance to be returned.</typeparam>
            <param name="path">The path to the XML document.</param>
            <param name="callback">The callback function used for converting the loaded <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>Returns an instance of <code>T</code> representing the specified <code>xml</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlHelpers.LoadXmlDocument(System.String)">
            <summary>
            Loads the XML document at specified <code>path</code> and returns it as an instance of
            <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <param name="path">The path to the XML document.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XDocument"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlHelpers.LoadXmlDocument``1(System.String,System.Func{System.Xml.Linq.XDocument,``0})">
            <summary>
            Loads the XML document at specified <code>path</code>, which is then converted into an instance of
            <code>T</code> using the specified <code>callback</code> function.
            </summary>
            <typeparam name="T">The type of the instance to be returned.</typeparam>
            <param name="path">The path to the XML document.</param>
            <param name="callback">The callback function used for converting the loaded <see cref="T:System.Xml.Linq.XDocument"/>.</param>
            <returns>Returns an instance of <code>T</code> representing the XML document.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Locations.EssentialsLocation">
            <summary>
            Class representing a location identified by latitude and longitude.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Locations.ILocation">
            <summary>
            Class representing a location based on a latitude and longitude.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Locations.ILocation.Latitude">
            <summary>
            Gets the latitude of the location. The latitude specifies the north-south position of a
            point on the Earth's surface.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Locations.ILocation.Longitude">
            <summary>
            Gets the longitude of the location. The longitude specifies the east-west position of a
            point on the Earth's surface.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Locations.EssentialsLocation.#ctor">
            <summary>
            Initializes a location with default latitude and longitude.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Locations.EssentialsLocation.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a location with the specified <code>latitude</code> and <code>longitude</code>.
            </summary>
            <param name="latitude">The latitude of the location.</param>
            <param name="longitude">The longitude of the location.</param>
        </member>
        <member name="P:Skybrud.Essentials.Locations.EssentialsLocation.Latitude">
            <summary>
            Gets the latitude of the location. The latitude specifies the north-south position of a
            point on the Earth's surface.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Locations.EssentialsLocation.Longitude">
            <summary>
            Gets the longitude of the location. The longitude specifies the east-west position of a
            point on the Earth's surface.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Locations.Extensions.LocationExtensions">
            <summary>
            Static class with various extension methods for the <see cref="T:Skybrud.Essentials.Locations.ILocation"/> interface.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Locations.Extensions.LocationExtensions.GetDistance(Skybrud.Essentials.Locations.ILocation,Skybrud.Essentials.Locations.ILocation)">
            <summary>
            Calculates the distance in meters between two GPS locations.
            </summary>
            <param name="loc1">The first location.</param>
            <param name="loc2">The second location.</param>
        </member>
        <member name="T:Skybrud.Essentials.Locations.LocationUtils">
            <summary>
            Static utility class with helper methods related to locations.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Locations.LocationUtils.EarthEquatorialRadiusMeters">
            <summary>
            Gets the equatorial radius of Earth (in meters).
            
            Notice: When comparing with various online services, they seem to use 6378137 meters for the equatorial
            radius of Earth, while 6378136.6 meters for the equatorial radius is more precise.
            </summary>
            <see>
                <cref>https://web.archive.org/web/20130826043456/http://asa.usno.navy.mil/SecK/2011/Astronomical_Constants_2011.txt</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Locations.LocationUtils.GetDistance(Skybrud.Essentials.Locations.ILocation,Skybrud.Essentials.Locations.ILocation)">
            <summary>
            Calculates the distance in meters between two GPS locations.
            </summary>
            <param name="loc1">The first location.</param>
            <param name="loc2">The second location.</param>
            <returns>Returns the distance in meters between the two locations.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Locations.LocationUtils.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance in meters between two GPS locations.
            </summary>
            <param name="lat1">The latitude of the first location.</param>
            <param name="lng1">The longitude of the first location.</param>
            <param name="lat2">The latitude of the second location.</param>
            <param name="lng2">The longitude of the second location.</param>
            <returns>Returns the distance in meters between the two locations.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Security.SecurityUtils">
            <summary>
            Static class with miscellaneous helper methods.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.Base64Encode(System.String)">
            <summary>
            Base64 encodes the specified <code>input</code> string.
            </summary>
            <param name="input">The input string to be encoded.</param>
            <returns>Returns the Base64 encoded string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.Base64Decode(System.String)">
            <summary>
            Base64 decodes the specified <code>input</code> string.
            </summary>
            <param name="input">The input string to be decoded.</param>
            <returns>Returns the Base64 decoded string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetMd5Hash(System.String)">
            <summary>
            Gets the MD5 hash of <code>input</code>, and returns that hash. The input string is converted
            using <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="input">The input string</param>
            <returns>Returns the hash as a 32-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetMd5Hash(System.String,System.Text.Encoding)">
            <summary>
            Gets the MD5 hash of <code>input</code>, and returns that hash. The input string is converted
            using <code>encoding</code>.
            </summary>
            <param name="input">The input string</param>
            <param name="encoding">The encoding to be used for the conversion.</param>
            <returns>Returns the hash as a 32-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetMd5HashFromFile(System.String)">
            <summary>
            Gets the MD5 hash of the file specified by the <code>path</code>. The hash is a 64-character
            hexadecimal number.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>Returns the hash as a 32-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetSha1Hash(System.String)">
            <summary>
            Gets the SHA1 hash of <code>input</code>, and returns that hash. The input string is converted
            using <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="input">The input string</param>
            <returns>Returns the hash as a 40-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetSha1Hash(System.String,System.Text.Encoding)">
            <summary>
            Gets the SHA1 hash of <code>input</code>, and returns that hash. The input string is converted
            using <code>encoding</code>.
            </summary>
            <param name="input">The input string</param>
            <param name="encoding">The encoding to be used for the conversion.</param>
            <returns>Returns the hash as a 40-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetSha1FromFile(System.String)">
            <summary>
            Gets the SHA1 hash of the file specified by the <code>path</code>. The hash is a 40-character
            hexadecimal number.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>Returns the hash as a 40-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetSha256Hash(System.String)">
            <summary>
            Gets the SHA256 hash of <code>input</code>, and returns that hash. The input string is converted using <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="input">The input string</param>
            <returns>Returns the hash as a 64-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetSha256Hash(System.String,System.Text.Encoding)">
            <summary>
            Gets the SHA256 hash of <code>input</code>, and returns that hash. The input string is converted using <code>encoding</code>.
            </summary>
            <param name="input">The input string</param>
            <param name="encoding">The encoding to be used for the conversion.</param>
            <returns>Returns the hash as a 64-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetSha256HashFromFile(System.String)">
            <summary>
            Gets the SHA256 hash of the file specified by the <code>path</code>. The hash is a 64-character
            hexadecimal number.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>Returns the hash as a 64-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetSha512Hash(System.String)">
            <summary>
            Gets the SHA512 hash of <code>input</code>, and returns that hash. The input string is converted using <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <param name="input">The input string</param>
            <returns>Returns the hash as a 128-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetSha512Hash(System.String,System.Text.Encoding)">
            <summary>
            Gets the SHA512 hash of <code>input</code>, and returns that hash. The input string is converted using <code>encoding</code>.
            </summary>
            <param name="input">The input string</param>
            <param name="encoding">The encoding to be used for the conversion.</param>
            <returns>Returns the hash as a 128-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetSha512HashFromFile(System.String)">
            <summary>
            Gets the SHA512 hash of the file specified by the <code>path</code>. The hash is a 128-character
            hexadecimal number.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>Returns the hash as a 128-character hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Gets the hash of <code>input</code> using the specified <code>algorithm</code>.
            </summary>
            <param name="algorithm">The algorithm to be used.</param>
            <param name="input">The input string to be hashed.</param>
            <returns>Returns the hash as a hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetHash(System.Security.Cryptography.HashAlgorithm,System.String,System.Text.Encoding)">
            <summary>
            Gets the hash of <code>input</code> using the specified <code>algorithm</code>.
            </summary>
            <param name="algorithm">The algorithm to be used.</param>
            <param name="input">The input string to be hashed.</param>
            <param name="encoding">The encoding to be used.</param>
            <returns>Returns the hash as a hexadecimal number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Security.SecurityUtils.GetHashFromFile(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Gets the hash of the file specified by the <code>path</code> using the specified <code>algorithm</code>.
            </summary>
            <param name="algorithm">The algorithm to be used.</param>
            <param name="path">The path of the file.</param>
            <returns>Returns the hash as a 64-character hexadecimal number.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Strings.Extensions.StringExtensions">
            <summary>
            Static class with various extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Strings.Extensions.StringExtensions.CsvToInt(System.String)">
            <summary>
            Converts a comma separated string into an array of integers.
            </summary>
            <param name="str">The comma separated string to be converted.</param>
            <returns>Returns an array of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.Extensions.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the specified <code>str</code> to camel case (also referred to as lower camel casing).
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the camel cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.Extensions.StringExtensions.ToCamelCase(System.Enum)">
            <summary>
            Converts the name of the specified enum <code>value</code> to a camel cased string.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the camel cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.Extensions.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Converts the specified <code>str</code> to Pascal case (also referred to as upper camel casing).
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the Pascal cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.Extensions.StringExtensions.ToPascalCase(System.Enum)">
            <summary>
            Converts the name of the specified enum <code>value</code> to a Pascal cased string.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the Pascal cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.Extensions.StringExtensions.ToUnderscore(System.String)">
            <summary>
            Converts the specified <code>str</code> to a lower case string with words separated by underscores.
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the converted string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.Extensions.StringExtensions.ToUnderscore(System.Enum)">
            <summary>
            Converts the specified enum value to a lower case string with words separated by underscores.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the converted string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.Extensions.StringExtensions.FirstCharToUpper(System.String)">
            <summary>
            Uppercases the first character of a the specified <code>str</code>. If <code>str</code> is either
            <code>null</code> or empty, an empty string will be returned instead.
            </summary>
            <param name="str">The string which first character should be uppercased.</param>
            <returns>The input string with the first character has been uppercased.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.Extensions.StringExtensions.UrlEncode(System.String)">
            <summary>
            Encodes a URL string.
            </summary>
            <param name="str">The string to be encoded.</param>
            <returns>Returns the encoded string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.Extensions.StringExtensions.UrlDecode(System.String)">
            <summary>
            Decodes a URL string.
            </summary>
            <param name="str">The string to be decoded.</param>
            <returns>Returns the decoded string.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Strings.StringUtils">
            <summary>
            Utility class with various static helper methods for working with strings.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.ParseBoolean(System.String)">
            <summary>
            Parses the specified <code>str</code> into an instance of <see cref="T:System.Boolean"/>. The string is
            considered <code>true</code> if it matches either <code>1</code>, <code>t</code> or <code>true</code>
            (case insensitive).
            </summary>
            <param name="str">The string to be parsed.</param>
            <returns>Returns <code>true</code> if <code>str</code> matches either <code>true</code>, <code>1</code>
            or <code>t</code> (case insensitive).</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.ParseBoolean(System.Object)">
            <summary>
            Parses the specified <code>value</code> into an instance of <see cref="T:System.Boolean"/>. The value is
            considered <code>true</code> if it matches either <code>1</code>, <code>t</code> or <code>true</code>
            (case insensitive).
            </summary>
            <param name="value">The value to be parsed.</param>
            <returns>Returns <code>true</code> if <code>value</code> matches either <code>true</code>, <code>1</code>
            or <code>t</code> (case insensitive).</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.CsvToInt(System.String)">
            <summary>
            Converts a comma separated string into an array of integers.
            </summary>
            <param name="str">The comma separated string to be converted.</param>
            <returns>Returns an array of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.ToCamelCase(System.String)">
            <summary>
            Converts the specified <code>str</code> to camel case (also referred to as lower camel casing).
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the camel cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.ToCamelCase(System.Enum)">
            <summary>
            Converts the name of the specified enum <code>value</code> to a camel cased string.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the camel cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.ToPascalCase(System.String)">
            <summary>
            Converts the specified <code>str</code> to Pascal case (also referred to as upper camel casing).
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the Pascal cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.ToPascalCase(System.Enum)">
            <summary>
            Converts the name of the specified enum <code>value</code> to a Pascal cased string.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the Pascal cased string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.ToUnderscore(System.String)">
            <summary>
            Converts the specified <code>str</code> to a lower case string with words separated by underscores.
            </summary>
            <param name="str">The string to be converted.</param>
            <returns>Returns the converted string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.ToUnderscore(System.Enum)">
            <summary>
            Converts the specified enum value to a lower case string with words separated by underscores.
            </summary>
            <param name="value">The enum value to be converted.</param>
            <returns>Returns the converted string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.FirstCharToUpper(System.String)">
            <summary>
            Uppercases the first character of a the specified <code>str</code>. If <code>str</code> is either
            <code>null</code> or empty, an empty string will be returned instead.
            </summary>
            <param name="str">The string which first character should be uppercased.</param>
            <returns>The input string with the first character has been uppercased.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.UrlEncode(System.String)">
            <summary>
            Encodes a URL string.
            </summary>
            <param name="str">The string to be encoded.</param>
            <returns>Returns the encoded string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Strings.StringUtils.UrlDecode(System.String)">
            <summary>
            Decodes a URL string.
            </summary>
            <param name="str">The string to be decoded.</param>
            <returns>Returns the decoded string.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Time.CalendarUtils">
            <summary>
            Utility class used for calculating the dates of varios international and national days.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetPalmSunday(System.Int32)">
            <summary>
            Gets the date of <strong>Palm Sunday</strong>, which falls on the Sunday before <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Palm Sunday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Palm_Sunday#Observance_in_the_liturgy</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetMoundyThursday(System.Int32)">
            <summary>
            Gets the date of <strong>Moundy Thursday</strong>, which falls on the Thursday before <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Moundy Thursday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Maundy_Thursday</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetGoodFriday(System.Int32)">
            <summary>
            Gets the date of <strong>Good Friday</strong>, which falls on the Friday before <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Good Friday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Good_Friday</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetHolySaturday(System.Int32)">
            <summary>
            Gets the date of <strong>Holy Saturday</strong>, which falls on the Saturday before <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Holy Saturday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Holy_Saturday</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetEasterSunday(System.Int32)">
            <summary>
            Calculates the date of <strong>Easter Sunday</strong> in the specified <code>year</code> according to
            Western Christianity and the <see cref="T:System.Globalization.GregorianCalendar"/>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Easter Sunday</code>.</returns>
            <see>
                <cref>https://da.wikipedia.org/wiki/Påske#Beregning_af_p.C3.A5skedagens_dato</cref>
            </see>
            <see>
                <cref>https://en.wikipedia.org/wiki/Easter#Date</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetEasterMonday(System.Int32)">
            <summary>
            Gets the date of <strong>Easter Monday</strong>, which falls on the Monday after <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Easter Monday</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Easter_Monday</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetAscensionDay(System.Int32)">
            <summary>
            Gets the date of <strong>Ascension Day</strong>, which is celebrated on a Thursday, the fortieth day of
            <strong>Easter</strong> (the 6th Thursday after <strong>Moundy Thursday</strong>).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Ascension Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Feast_of_the_Ascension</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetWhitSunday(System.Int32)">
            <summary>
            Gets the date of <strong>Whit Sunday</strong>, which is celebrated on the 7th Sunday after
            <strong>Easter</strong>.
            
            Depending on the year, Whit Sunday falls within the period from the
            <code>10th of May</code> to the <code>13th of June</code> (both inclusive).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Whit Sunday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Whitsun</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetWhitMonday(System.Int32)">
            <summary>
            Gets the date of <strong>Whit Monday</strong>, which is celebrated the day after
            <strong>Whit Sunday</strong>. Whit Sunday is the 7th Sunday after
            <strong>Easter</strong>.
            
            Depending on the year, Whit Monday falls within the period from the <code>11th of May</code> to the
            <code>14th of June</code> (both inclusive).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Whit Monday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Whit_Monday</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.SaintLucysDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Saint Lucy's Day</strong> (13th of December).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of Saint Lucy's Day.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Saint_Lucy's_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetChristmasEve(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Christmas Eve</strong> (24th of December).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of Christmas Eve.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Christmas_Eve</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetChristmasDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Christmas Day</strong> (25th of December).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Christmas Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Christmas_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetBoxingDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Boxing Day</strong> (26th of December).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Boxing Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Boxing_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetNewYearsEve(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing the date of <strong>New Year's Eve</strong> (31st of December).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>New Year's Eve</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/New_Year's_Eve</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetNewYearsDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>New Year's Day</strong> (1st of January).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>New Year's Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/New_Year's_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.GetGroundhogDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Groundhog Day</strong> (2nd of February).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Groundhog Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Groundhog_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.SaintPatricksDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Saint Patrick's Day</strong>. Saint
            Partick's Day is a cultural and religious celebration held on 17 March, the traditional death date of
            Saint Patrick, the foremost patron saint of Ireland.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Saint Patrick's Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Saint_Patrick's_Day</cref>
            </see>
        </member>
        <member name="T:Skybrud.Essentials.Time.CalendarUtils.Canada">
            <summary>
            Natianal holidays and special dates in <strong>Canada</strong>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.Canada.GetCanadaDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Canada Day</strong>. Canada Day is
            the national day of Canada, a federal statutory holiday celebrating the anniversary of the
            July 1, 1867, enactment of the Constitution Act, 1867 (then called the British North America Act,
            1867), which united three colonies into a single country called Canada within the British Empire.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Canada Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Canada_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.Canada.GetLabourDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Labour Day</strong>. Labour Day is a
            public holiday celebrated on the first Monday in September.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Labour Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Labour_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.Canada.GetThanksgivingDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Thanksgiving Day</strong>.
            Thanksgiving Day occurs on the second Monday in October, which celebrates the harvest and other blessings of the past year.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Thanksgiving Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Thanksgiving_(Canada)</cref>
            </see>
        </member>
        <member name="T:Skybrud.Essentials.Time.CalendarUtils.Denmark">
            <summary>
            Natianal holidays and special dates in <strong>Denmark</strong>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.Denmark.GetGeneralPrayerDay(System.Int32)">
            <summary>
            Calculates the date of <strong>General Prayer Day</strong> (or <code>Store Bededag</code>in Danish)
            - a national holiday in Denmark. It falls on the 4th Friday after <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of Store Bededag.</returns>
            <see>
                <cref>https://da.wikipedia.org/wiki/Store_bededag</cref>
            </see>
            <see>
                <cref>https://en.wikipedia.org/wiki/Store_Bededag</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.Denmark.GetConstitutionDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Constitution Day</strong>
            (<strong>Grundlovsdag</strong> in Danish). Constitution Day is observed on 5 June, and commemorates
            the anniversary of the signing of the Danish Constitution of 1849, which established Denmark as a
            constitutional monarchy, and honors the constitution of 1953, which was adopted on the same date.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Independence Day</strong>.</returns>
            <see>
                <cref>https://da.wikipedia.org/wiki/Grundlovsdag</cref>
            </see>
            <see>
                <cref>https://en.wikipedia.org/wiki/Constitution_Day_(Denmark)</cref>
            </see>
        </member>
        <member name="T:Skybrud.Essentials.Time.CalendarUtils.UnitedStates">
            <summary>
            Natianal holidays and special dates in the <strong>United States</strong>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.UnitedStates.GetIndependenceDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Independence Day</strong> (4th of July).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Independence Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Independence_Day_(United_States)</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.UnitedStates.GetPatriotDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Patriot Day</strong> also known as
            <code>National Day of Service and Remembrance</code>. The day occurs on September 11 of each year
            in memory of the 2,977 people killed in the 2001 September 11 attacks.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of
            <strong>Patriot Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Patriot_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.UnitedStates.GetLaborDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Labor Day</strong>. Labor Day is a
            public holiday celebrated on the first Monday in September.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of
            <strong>Patriot Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Labor_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.UnitedStates.GetMemorialDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Memorial Day</strong>. Memorial Day
            is a federal holiday in the United States for remembering the people who died while serving in the
            country's armed forces. The holiday is observed every year on the last Monday of May.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of
            <strong>Memorial Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Labor_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.UnitedStates.GetVeteransDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Veterans Day</strong>. Veterans Day
            is an official United States public holiday, observed annually on November 11, that honors military
            veterans, that is, persons who served in the United States Armed Forces.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of
            <strong>Veterans Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Veterans_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarUtils.UnitedStates.GetThanksgivingDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Thanksgiving Day</strong>.
            Thanksgiving, or Thanksgiving Day, is an important public holiday, celebrated on the fourth
            Thursday in November in the United States. It originated as a harvest festival. Thanksgiving has
            been celebrated nationally on and off since 1789, after a proclamation by George Washington.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Thanksgiving Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Thanksgiving_(United_States)</cref>
            </see>
        </member>
        <member name="T:Skybrud.Essentials.Time.CalendarHelper">
            <summary>
            Utility class used for calculating the dates of varios international and national days.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetPalmSunday(System.Int32)">
            <summary>
            Gets the date of <strong>Palm Sunday</strong>, which falls on the Sunday before <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Palm Sunday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Palm_Sunday#Observance_in_the_liturgy</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetMoundyThursday(System.Int32)">
            <summary>
            Gets the date of <strong>Moundy Thursday</strong>, which falls on the Thursday before <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Moundy Thursday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Maundy_Thursday</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetGoodFriday(System.Int32)">
            <summary>
            Gets the date of <strong>Good Friday</strong>, which falls on the Friday before <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Good Friday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Good_Friday</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetHolySaturday(System.Int32)">
            <summary>
            Gets the date of <strong>Holy Saturday</strong>, which falls on the Saturday before <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Holy Saturday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Holy_Saturday</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetEasterSunday(System.Int32)">
            <summary>
            Calculates the date of <strong>Easter Sunday</strong> in the specified <code>year</code> according to
            Western Christianity and the <see cref="T:System.Globalization.GregorianCalendar"/>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Easter Sunday</code>.</returns>
            <see>
                <cref>https://da.wikipedia.org/wiki/Påske#Beregning_af_p.C3.A5skedagens_dato</cref>
            </see>
            <see>
                <cref>https://en.wikipedia.org/wiki/Easter#Date</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetEasterMonday(System.Int32)">
            <summary>
            Gets the date of <strong>Easter Monday</strong>, which falls on the Monday after <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Easter Monday</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Easter_Monday</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetAscensionDay(System.Int32)">
            <summary>
            Gets the date of <strong>Ascension Day</strong>, which is celebrated on a Thursday, the fortieth day of
            <strong>Easter</strong> (the 6th Thursday after <strong>Moundy Thursday</strong>).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Ascension Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Feast_of_the_Ascension</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetWhitSunday(System.Int32)">
            <summary>
            Gets the date of <strong>Whit Sunday</strong>, which is celebrated on the 7th Sunday after
            <strong>Easter</strong>.
            
            Depending on the year, Whit Sunday falls within the period from the
            <code>10th of May</code> to the <code>13th of June</code> (both inclusive).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Whit Sunday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Whitsun</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetWhitMonday(System.Int32)">
            <summary>
            Gets the date of <strong>Whit Monday</strong>, which is celebrated the day after
            <strong>Whit Sunday</strong>. Whit Sunday is the 7th Sunday after
            <strong>Easter</strong>.
            
            Depending on the year, Whit Monday falls within the period from the <code>11th of May</code> to the
            <code>14th of June</code> (both inclusive).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <code>Whit Monday</code>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Whit_Monday</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.SaintLucysDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Saint Lucy's Day</strong> (13th of December).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of Saint Lucy's Day.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Saint_Lucy's_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetChristmasEve(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Christmas Eve</strong> (24th of December).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of Christmas Eve.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Christmas_Eve</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetChristmasDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Christmas Day</strong> (25th of December).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Christmas Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Christmas_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetBoxingDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Boxing Day</strong> (26th of December).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Boxing Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Boxing_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetNewYearsEve(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing the date of <strong>New Year's Eve</strong> (31st of December).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>New Year's Eve</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/New_Year's_Eve</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetNewYearsDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>New Year's Day</strong> (1st of January).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>New Year's Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/New_Year's_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.GetGroundhogDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Groundhog Day</strong> (2nd of February).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Groundhog Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Groundhog_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.SaintPatricksDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Saint Patrick's Day</strong>. Saint
            Partick's Day is a cultural and religious celebration held on 17 March, the traditional death date of
            Saint Patrick, the foremost patron saint of Ireland.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Saint Patrick's Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Saint_Patrick's_Day</cref>
            </see>
        </member>
        <member name="T:Skybrud.Essentials.Time.CalendarHelper.Canada">
            <summary>
            Natianal holidays and special dates in <strong>Canada</strong>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.Canada.GetCanadaDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Canada Day</strong>. Canada Day is
            the national day of Canada, a federal statutory holiday celebrating the anniversary of the
            July 1, 1867, enactment of the Constitution Act, 1867 (then called the British North America Act,
            1867), which united three colonies into a single country called Canada within the British Empire.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Canada Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Canada_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.Canada.GetLabourDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Labour Day</strong>. Labour Day is a
            public holiday celebrated on the first Monday in September.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Labour Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Labour_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.Canada.GetThanksgivingDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Thanksgiving Day</strong>.
            Thanksgiving Day occurs on the second Monday in October, which celebrates the harvest and other blessings of the past year.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Thanksgiving Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Thanksgiving_(Canada)</cref>
            </see>
        </member>
        <member name="T:Skybrud.Essentials.Time.CalendarHelper.Denmark">
            <summary>
            Natianal holidays and special dates in <strong>Denmark</strong>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.Denmark.GetGeneralPrayerDay(System.Int32)">
            <summary>
            Calculates the date of <strong>General Prayer Day</strong> (or <code>Store Bededag</code>in Danish)
            - a national holiday in Denmark. It falls on the 4th Friday after <strong>Easter</strong>.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of Store Bededag.</returns>
            <see>
                <cref>https://da.wikipedia.org/wiki/Store_bededag</cref>
            </see>
            <see>
                <cref>https://en.wikipedia.org/wiki/Store_Bededag</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.Denmark.GetConstitutionDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Constitution Day</strong>
            (<strong>Grundlovsdag</strong> in Danish). Constitution Day is observed on 5 June, and commemorates
            the anniversary of the signing of the Danish Constitution of 1849, which established Denmark as a
            constitutional monarchy, and honors the constitution of 1953, which was adopted on the same date.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Independence Day</strong>.</returns>
            <see>
                <cref>https://da.wikipedia.org/wiki/Grundlovsdag</cref>
            </see>
            <see>
                <cref>https://en.wikipedia.org/wiki/Constitution_Day_(Denmark)</cref>
            </see>
        </member>
        <member name="T:Skybrud.Essentials.Time.CalendarHelper.UnitedStates">
            <summary>
            Natianal holidays and special dates in the <strong>United States</strong>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.UnitedStates.GetIndependenceDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Independence Day</strong> (4th of July).
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Independence Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Independence_Day_(United_States)</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.UnitedStates.GetPatriotDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Patriot Day</strong> also known as
            <code>National Day of Service and Remembrance</code>. The day occurs on September 11 of each year
            in memory of the 2,977 people killed in the 2001 September 11 attacks.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of
            <strong>Patriot Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Patriot_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.UnitedStates.GetLaborDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Labor Day</strong>. Labor Day is a
            public holiday celebrated on the first Monday in September.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of
            <strong>Patriot Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Labor_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.UnitedStates.GetMemorialDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Memorial Day</strong>. Memorial Day
            is a federal holiday in the United States for remembering the people who died while serving in the
            country's armed forces. The holiday is observed every year on the last Monday of May.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of
            <strong>Memorial Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Labor_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.UnitedStates.GetVeteransDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Veterans Day</strong>. Veterans Day
            is an official United States public holiday, observed annually on November 11, that honors military
            veterans, that is, persons who served in the United States Armed Forces.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of
            <strong>Veterans Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Veterans_Day</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.CalendarHelper.UnitedStates.GetThanksgivingDay(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.DateTime"/> representing <strong>Thanksgiving Day</strong>.
            Thanksgiving, or Thanksgiving Day, is an important public holiday, celebrated on the fourth
            Thursday in November in the United States. It originated as a harvest festival. Thanksgiving has
            been celebrated nationally on and off since 1789, after a proclamation by George Washington.
            </summary>
            <param name="year">The year.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the date of <strong>Thanksgiving Day</strong>.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/Thanksgiving_(United_States)</cref>
            </see>
        </member>
        <member name="T:Skybrud.Essentials.Time.EssentialsDateMonth">
            <summary>
            Enum class with values representing each month of a year.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.January">
            <summary>
            Represents the month of January.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.February">
            <summary>
            Represents the month of February.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.March">
            <summary>
            Represents the month of March.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.April">
            <summary>
            Represents the month of April.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.May">
            <summary>
            Represents the month of May.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.June">
            <summary>
            Represents the month of June.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.July">
            <summary>
            Represents the month of July.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.August">
            <summary>
            Represents the month of August.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.September">
            <summary>
            Represents the month of September.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.October">
            <summary>
            Represents the month of October.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.November">
            <summary>
            Represents the month of November.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.EssentialsDateMonth.December">
            <summary>
            Represents the month of December.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Time.EssentialsDateTime">
            <summary>
            Class wrapping an instance of <see cref="T:System.DateTimeOffset"/> (as an alternative to using <see cref="T:System.Nullable`1"/>).
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor">
            <summary>
            Initializes a new instance based on <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance based on the specified <code>dt</code>.
            </summary>
            <param name="dt">The an instance <see cref="P:Skybrud.Essentials.Time.EssentialsDateTime.DateTime"/> the instance should be based on.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.Int64)">
            <summary>
            Initializes a new instance based on the specified amount of <code>ticks</code>.
            </summary>
            <param name="ticks">The amount ticks the instance should be based on.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.Int64,System.DateTimeKind)">
            <summary>
            Initializes a new instance based on the specified amount of <code>ticks</code> and <code>kind</code>.
            </summary>
            <param name="ticks">The amount ticks the instance should be based on.</param>
            <param name="kind">One of the enumeration values that indicates whether ticks specifies a local time,
            Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance based on the specified <code>year</code>, <code>month</code> and
            <code>day</code>.
            </summary>
            <param name="year">The year (<code>1</code> through <code>9999</code>).</param>
            <param name="month">The month (<code>1</code> through <code>12</code>).</param>
            <param name="day">The day (<code>1</code> through the number of days in month).</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance based on the specified <code>year</code>, <code>month</code> and
            <code>day</code> for the specified <code>calendar</code>.
            </summary>
            <param name="year">The year (<code>1</code> through <code>9999</code>).</param>
            <param name="month">The month (<code>1</code> through <code>12</code>).</param>
            <param name="day">The day (<code>1</code> through the number of days in month).</param>
            <param name="calendar">The calendar that is used to interpret year, month, and day.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance based on the specified <code>year</code>, <code>month</code>,
            <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code>.
            </summary>
            <param name="year">The year (<code>1</code> through <code>9999</code>).</param>
            <param name="month">The month (<code>1</code> through <code>12</code>).</param>
            <param name="day">The day (<code>1</code> through the number of days in month).</param>
            <param name="hour">The hours (<code>0</code> through <code>23</code>).</param>
            <param name="minute">The minutes (<code>0</code> through <code>59</code>).</param>
            <param name="second">The seconds (<code>0</code> through <code>59</code>).</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance based on the specified <code>year</code>, <code>month</code>,
            <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code> and <code>kind</code>.
            </summary>
            <param name="year">The year (<code>1</code> through <code>9999</code>).</param>
            <param name="month">The month (<code>1</code> through <code>12</code>).</param>
            <param name="day">The day (<code>1</code> through the number of days in month).</param>
            <param name="hour">The hours (<code>0</code> through <code>23</code>).</param>
            <param name="minute">The minutes (<code>0</code> through <code>59</code>).</param>
            <param name="second">The seconds (<code>0</code> through <code>59</code>).</param>
            <param name="kind">One of the enumeration values that indicates whether ticks specifies a local time,
            Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance based on the specified <code>year</code>, <code>month</code>, <code>day</code>,
            <code>hour</code>, <code>minute</code> and <code>second</code> for the specified  <code>calendar</code>.
            </summary>
            <param name="year">The year (<code>1</code> through <code>9999</code>).</param>
            <param name="month">The month (<code>1</code> through <code>12</code>).</param>
            <param name="day">The day (<code>1</code> through the number of days in month).</param>
            <param name="hour">The hours (<code>0</code> through <code>23</code>).</param>
            <param name="minute">The minutes (<code>0</code> through <code>59</code>).</param>
            <param name="second">The seconds (<code>0</code> through <code>59</code>).</param>
            <param name="calendar">The calendar that is used to interpret year, month, and day.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance based on the specified <code>year</code>, <code>month</code>, <code>day</code>,
            <code>hour</code>, <code>minute</code>, <code>second</code> and <code>millisecond</code>.
            </summary>
            <param name="year">The year (<code>1</code> through <code>9999</code>).</param>
            <param name="month">The month (<code>1</code> through <code>12</code>).</param>
            <param name="day">The day (<code>1</code> through the number of days in month).</param>
            <param name="hour">The hours (<code>0</code> through <code>23</code>).</param>
            <param name="minute">The minutes (<code>0</code> through <code>59</code>).</param>
            <param name="second">The seconds (<code>0</code> through <code>59</code>).</param>
            <param name="millisecond">The milliseconds (<code>0</code> through <code>999</code>).</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance based on the specified <code>year</code>, <code>month</code>, <code>day</code>,
            <code>hour</code>, <code>minute</code>, <code>second</code>, <code>millisecond</code> and <code>kind</code>.
            </summary>
            <param name="year">The year (<code>1</code> through <code>9999</code>).</param>
            <param name="month">The month (<code>1</code> through <code>12</code>).</param>
            <param name="day">The day (<code>1</code> through the number of days in month).</param>
            <param name="hour">The hours (<code>0</code> through <code>23</code>).</param>
            <param name="minute">The minutes (<code>0</code> through <code>59</code>).</param>
            <param name="second">The seconds (<code>0</code> through <code>59</code>).</param>
            <param name="millisecond">The milliseconds (<code>0</code> through <code>999</code>).</param>
            <param name="kind">One of the enumeration values that indicates whether ticks specifies a local time,
            Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance based on the specified <code>year</code>, <code>month</code>, <code>day</code>,
            <code>hour</code>, <code>minute</code>, <code>second</code> and <code>millisecond</code> for the specified
            <code>calendar</code>.
            </summary>
            <param name="year">The year (<code>1</code> through <code>9999</code>).</param>
            <param name="month">The month (<code>1</code> through <code>12</code>).</param>
            <param name="day">The day (<code>1</code> through the number of days in month).</param>
            <param name="hour">The hours (<code>0</code> through <code>23</code>).</param>
            <param name="minute">The minutes (<code>0</code> through <code>59</code>).</param>
            <param name="second">The seconds (<code>0</code> through <code>59</code>).</param>
            <param name="millisecond">The milliseconds (<code>0</code> through <code>999</code>).</param>
            <param name="calendar">The calendar that is used to interpret year, month, and day.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
            <summary>
            Initializes a new instance based on the specified <code>year</code>, <code>month</code>, <code>day</code>,
            <code>hour</code>, <code>minute</code>, <code>second</code> and <code>millisecond</code> for the specified<code>calendar</code> and <code>kind</code>.
            </summary>
            <param name="year">The year (<code>1</code> through <code>9999</code>).</param>
            <param name="month">The month (<code>1</code> through <code>12</code>).</param>
            <param name="day">The day (<code>1</code> through the number of days in month).</param>
            <param name="hour">The hours (<code>0</code> through <code>23</code>).</param>
            <param name="minute">The minutes (<code>0</code> through <code>59</code>).</param>
            <param name="second">The seconds (<code>0</code> through <code>59</code>).</param>
            <param name="millisecond">The milliseconds (<code>0</code> through <code>999</code>).</param>
            <param name="calendar">The calendar that is used to interpret year, month, and day.</param>
            <param name="kind">One of the enumeration values that indicates whether ticks specifies a local time,
            Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToString">
            <summary>
            Converts the value of the current <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> to its equivalent string representation. 
            </summary>
            <returns>A string representation of value of the current <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> object.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of the current <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> to its equivalent string representation
            using the specified <code>provider</code>.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>A string representation of value of the current <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> object as specified by
            <code>provider</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToString(System.String)">
            <summary>
            Converts the value of the current <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> to its equivalent string representation using
            the specified <code>format</code>.
            </summary>
            <param name="format">A standard or custom date and time format string.</param>
            <returns>A string representation of value of the current <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> object as specified by
            <code>format</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the current <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> to its equivalent string representation using
            the specified <code>format</code> and <code>provider</code>.
            </summary>
            <param name="format">A standard or custom date and time format string.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>A string representation of value of the current <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> object as specified by
            <code>format</code> and <code>provider</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.Add(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> that adds the value of the specified
            <see cref="T:System.TimeSpan"/> to the value of this instance.
            </summary>
            <param name="value">A positive or negative time interval.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the time
            interval represented by value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is less than
            <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.AddDays(System.Double)">
            <summary>
            Returns a new <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> that adds the specified number of days to the value of this
            instance.
            </summary>
            <param name="value">A number of whole and fractional days. The value parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number
            of days represented by value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is less than
            <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.AddHours(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of hours to the value of this
            instance.
            </summary>
            <param name="value">A number of whole and fractional hours. The value parameter can be negative or
            positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number
            of hours represented by value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is less
            than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.AddMilliseconds(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of milliseconds to the value of
            this instance.
            </summary>
            <param name="value">A number of whole and fractional milliseconds. The value parameter can be negative or
            positive. Note that this value is rounded to the nearest integer.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number
            of milliseconds represented by value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is less
            than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.AddMinutes(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of minutes to the value of this
            instance.
            </summary>
            <param name="value">A number of whole and fractional minutes. The value parameter can be negative or
            positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number
            of minutes represented by value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is less
            than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.AddMonths(System.Int32)">
            <summary>
            Returns a new System.DateTime that adds the specified number of months to the value of this instance.
            </summary>
            <param name="months">A number of months. The months parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and months.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is less
            than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>. Or
            <code>months</code> is less than <code>-120000</code> or greater than <code>120000</code>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.AddSeconds(System.Double)">
            <summary>
            Returns a new <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> that adds the specified number of seconds to the value of this
            instance.
            </summary>
            <param name="value">A number of whole and fractional seconds. The value parameter can be negative or
            positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number
            of seconds represented by value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is less
            than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.AddTicks(System.Int64)">
            <summary>
            Returns a new <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> that adds the specified number of ticks to the value of this
            instance.
            </summary>
            <param name="value">A number of 100-nanosecond ticks. The value parameter can be positive or negative.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the time
            represented by value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is less
            than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.AddYears(System.Int32)">
            <summary>
            Returns a new <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> that adds the specified number of years to the value of this
            instance.
            </summary>
            <param name="value">A number of years. The value parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number
            of years represented by value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is less
            than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.CompareTo(System.DateTime)">
            <summary>
            Compares the value of this instance to a specified <see cref="P:Skybrud.Essentials.Time.EssentialsDateTime.DateTime"/> value and returns an integer that
            indicates whether this instance is earlier than, the same as, or later than the specified
            <see cref="P:Skybrud.Essentials.Time.EssentialsDateTime.DateTime"/> value.
            </summary>
            <param name="value">The value to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the <code>value</code> parameter.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.CompareTo(Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> value and returns an
            integer that indicates whether this instance is earlier than, the same as, or later than the specified
            <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> value.
            </summary>
            <param name="value">The value to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the <code>value</code> parameter.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object that contains a specified <see cref="P:Skybrud.Essentials.Time.EssentialsDateTime.DateTime"/>
            value, and returns an integer that indicates whether this instance is earlier than, the same as, or later
            than the specified <see cref="P:Skybrud.Essentials.Time.EssentialsDateTime.DateTime"/> value.
            </summary>
            <param name="value">The value to compare to the current instance.</param>
            <returns>A signed number indicating the relative values of this instance and the <code>value</code> parameter.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetDateTimeFormats">
            <summary>
            Converts the value of this instance to all the string representations supported by the standard date and
            time format specifiers.
            </summary>
            <returns>A string array where each element is the representation of the value of this instance formatted
            with one of the standard date and time format specifiers.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetDateTimeFormats(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to all the string representations supported by the standard date and
            time format specifiers and the specified culture-specific formatting information.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
            <returns>A string array where each element is the representation of the value of this instance formatted
            with one of the standard date and time format specifiers.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetDateTimeFormats(System.Char)">
            <summary>
            Converts the value of this instance to all the string representations supported by the specified standard
            date and time format specifier.
            </summary>
            <param name="format">A standard date and time format string.</param>
            <returns>A string array where each element is the representation of the value of this instance formatted
            with the format standard date and time format specifier.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to all the string representations supported by the specified standard
            date and time format specifier and culture-specific formatting information.
            </summary>
            <param name="format">A date and time format string.</param>
            <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
            <returns>A string array where each element is the representation of the value of this instance formatted
            with one of the standard date and time format specifiers.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.IsDaylightSavingTime">
            <summary>
            Indicates whether the internal instance of <see cref="T:System.DateTime"/> is within the daylight saving time
            range for the current time zone.
            </summary>
            <summary>
            Returns <code>true</code> if <see cref="P:System.DateTime.Kind"/> is <see cref="F:System.DateTimeKind.Local"/>
            or <see cref="F:System.DateTimeKind.Unspecified"/> and the value of the internal instance of
            <see cref="T:System.DateTime"/> is within the daylight saving time range for the current time zone. Returns
            <code>false</code> if <see cref="P:System.DateTime.Kind"/> is <see cref="F:System.DateTimeKind.Utc"/>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToBinary">
            <summary>
            Serializes the internal <see cref="T:System.DateTime"/> object to a 64-bit binary value that subsequently can
            be used to recreate the <see cref="T:System.DateTime"/> object.
            </summary>
            <returns>A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind"/> and
            <see cref="P:System.DateTime.Ticks"/> properties.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToFileTime">
            <summary>
            Converts the value of the internal <see cref="T:System.DateTime"/> object to a Windows file time.
            </summary>
            <returns>The value of the internal <see cref="T:System.DateTime"/> object expressed as a Windows file time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and
            time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToFileTimeUtc">
            <summary>
            Converts the value of the internal <see cref="T:System.DateTime"/> object to a Windows file time.
            </summary>
            <returns>The value of the internal <see cref="T:System.DateTime"/> object expressed as a Windows file time.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and
            time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToLocalTime">
            <summary>
            Converts the value of the internal <see cref="T:System.DateTime"/> object to local time.
            </summary>
            <returns>An object whose <see cref="P:System.DateTime.Kind"/> property is
            <see cref="F:System.DateTimeKind.Local"/>, and whose value is the local time equivalent to the value of the
            internal <see cref="T:System.DateTime"/> object, or <see cref="F:System.DateTime.MaxValue"/> if the converted
            value is too large to be represented by a <see cref="T:System.DateTime"/> object, or
            <see cref="F:System.DateTime.MinValue"/> if the converted value is too small to be represented as a
            <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToLongDateString">
            <summary>
            Converts the value of the internal <see cref="T:System.DateTime"/> object to its equivalent long date string
            representation.
            </summary>
            <returns>A string that contains the long date string representation of the current System.DateTime object.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToLongTimeString">
            <summary>
            Converts the value of the internal <see cref="T:System.DateTime"/> object to its equivalent long time string
            representation.
            </summary>
            <returns>A string that contains the long time string representation of the current System.DateTime object.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToOADate">
            <summary>
            Converts the value of the internal <see cref="T:System.DateTime"/> object to the equivalent OLE Automation
            date.
            </summary>
            <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the
            value of this instance.</returns>
            <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE
            Automation Date.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToShortDateString">
            <summary>
            Converts the value of the internal <see cref="T:System.DateTime"/> object to its equivalent short date string
            representation.
            </summary>
            <returns>A string that contains the short date string representation of the internal
            <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToShortTimeString">
            <summary>
            Converts the value of the internal <see cref="T:System.DateTime"/> object to its equivalent short time string
            representation.
            </summary>
            <returns>A string that contains the short time string representation of the internal
            <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.ToUniversalTime">
            <summary>
            Converts the value of the internal <see cref="T:System.DateTime"/> object to Coordinated Universal Time (UTC).
            </summary>
            <returns>An object whose <code>System.DateTime.Kind</code> property is <code>System.DateTimeKind.Utc</code>,
            and whose value is the UTC equivalent to the value of the internal <see cref="T:System.DateTime"/> object, or
            <see cref="F:System.DateTime.MaxValue"/> if the converted value is too large to be represented by a
            <see cref="T:System.DateTime"/> object, or <see cref="F:System.DateTime.MinValue"/> if the converted value is
            too small to be represented by a <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.Subtract(System.DateTime)">
            <summary>
            Subtracts the specified date and time from this instance.
            </summary>
            <param name="value">The date and time value to subtract.</param>
            <returns>A time interval that is equal to the date and time represented by this instance minus the date
            and time represented by value.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.Subtract(Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Subtracts the specified date and time from this instance.
            </summary>
            <param name="value">The date and time value to subtract.</param>
            <returns>A time interval that is equal to the date and time represented by this instance minus the date
            and time represented by value.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.Subtract(System.TimeSpan)">
            <summary>
            Subtracts the specified duration from this instance.
            </summary>
            <param name="value">The time interval to subtract.</param>
            <returns>An object that is equal to the date and time represented by this instance minus the time interval
            represented by value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is less
            than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetFirstDayOfMonth">
            <summary>
            Gets the first day of the month based on this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.
            </summary>
            <returns>Returns an instance of <see cref="P:Skybrud.Essentials.Time.EssentialsDateTime.DateTime"/> representing the first day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetLastDayOfMonth">
            <summary>
            Gets the last day of the month based on this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.
            </summary>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> representing the last day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetFirstDayOfWeek">
            <summary>
            Gets the first day of the week based on this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. <code>Monday</code> is
            considered the first day of the week.
            </summary>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetFirstDayOfWeek(System.DayOfWeek)">
            <summary>
            Gets the first day of the week based on this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> and <code>startOfWeek</code>.
            </summary>
            <param name="startOfWeek">The first day of the week (eg. <code>Monday</code> or <code>Sunday</code>).</param>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetLastDayOfWeek">
            <summary>
            Gets the last day of the week based on this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. <code>Monday</code> is considered
            the first day of the week.
            </summary>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetLastDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the last day of the week based on this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> and <code>startOfWeek</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="startOfWeek">The first day of the week (eg. <code>Monday</code> or <code>Sunday</code>).</param>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetDayName">
            <summary>
            Gets the English name of the day.
            </summary>
            <returns>Returns the English name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetLocalDayName">
            <summary>
            Gets the name of the day according to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetLocalDayName(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the day according to <code>culture</code>.
            </summary>
            <param name="culture">The culture to be used.</param>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetMonthName">
            <summary>
            Gets the English name of the month.
            </summary>
            <returns>Returns the English name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetLocalMonthName(System.DateTime)">
            <summary>
            Gets the name of the month according to <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetLocalMonthName(System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the month according to <code>culture</code>.
            </summary>
            <param name="culture">The culture to be used.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.Parse(System.String)">
            <summary>
            Parses the specified string into an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.
            </summary>
            <param name="str">The string to be parsed.</param>
            <returns>An instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.FromUnixTimestamp(System.Int32)">
            <summary>
            Initialize a new instance from the specified UNIX timestamp.
            </summary>
            <param name="timestamp">The UNIX timestamp specified in seconds.</param>
            <returns>An instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.FromUnixTimestamp(System.Int64)">
            <summary>
            Initialize a new instance from the specified UNIX timestamp.
            </summary>
            <param name="timestamp">The UNIX timestamp specified in seconds.</param>
            <returns>An instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.FromUnixTimestamp(System.Double)">
            <summary>
            Initialize a new instance from the specified UNIX timestamp.
            </summary>
            <param name="timestamp">The UNIX timestamp specified in seconds.</param>
            <returns>An instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.op_Implicit(System.DateTime)~Skybrud.Essentials.Time.EssentialsDateTime">
            <summary>
            Initializes a new instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> from the specified <code>timestamp</code>.
            </summary>
            <param name="timestamp">An instance of <see cref="P:Skybrud.Essentials.Time.EssentialsDateTime.DateTime"/>.</param>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.op_Addition(Skybrud.Essentials.Time.EssentialsDateTime,System.TimeSpan)">
            <summary>
            Adds <code>date</code> and <code>timeSpan</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="timeSpan">The time that should be added to <code>date</code>.</param>
            <returns>Returns the result as a new instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.op_Subtraction(Skybrud.Essentials.Time.EssentialsDateTime,System.TimeSpan)">
            <summary>
            Subtracts <code>timeSpan</code> from <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="timeSpan">The time that should be subtracted from <code>date</code>.</param>
            <returns>Returns the result as a new instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.op_Subtraction(Skybrud.Essentials.Time.EssentialsDateTime,Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Subtracts two instances of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.
            </summary>
            <param name="d1">The first instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <param name="d2">The second instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <returns>Returns the result as an instance of <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.op_Equality(Skybrud.Essentials.Time.EssentialsDateTime,Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Gets whether the timestamps represented by two instances of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> are equal.
            </summary>
            <param name="d1">The first instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <param name="d2">The second instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <returns>Returns <code>true</code> if the two instances represent the same date and time, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.op_Inequality(Skybrud.Essentials.Time.EssentialsDateTime,Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Gets whether the timestamps represented by two instances of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> are different from each other.
            </summary>
            <param name="d1">The first instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <param name="d2">The second instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <returns>Returns <code>true</code> if the two instances represents a different date and time, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.op_LessThan(Skybrud.Essentials.Time.EssentialsDateTime,Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Gets whether <code>d1</code> is less than <code>d2</code>.
            </summary>
            <param name="d1">The first instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <param name="d2">The second instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <returns>Returns <code>true</code> if <code>d1</code> is less than <code>d2</code>, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.op_LessThanOrEqual(Skybrud.Essentials.Time.EssentialsDateTime,Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Gets whether <code>d1</code> is less than or equal to <code>d2</code>.
            </summary>
            <param name="d1">The first instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <param name="d2">The second instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <returns>Returns <code>true</code> if <code>d1</code> is less than or equal to <code>d2</code>, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.op_GreaterThan(Skybrud.Essentials.Time.EssentialsDateTime,Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Gets whether <code>d1</code> is greater than <code>d2</code>.
            </summary>
            <param name="d1">The first instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <param name="d2">The second instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <returns>Returns <code>true</code> if <code>d1</code> is greater than <code>d2</code>, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.op_GreaterThanOrEqual(Skybrud.Essentials.Time.EssentialsDateTime,Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Gets whether <code>d1</code> is greater than or equal to <code>d2</code>.
            </summary>
            <param name="d1">The first instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <param name="d2">The second instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <returns>Returns <code>true</code> if <code>d1</code> is greater than or equal to <code>d2</code>, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.Equals(System.Object)">
            <summary>
            Gets whether this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> equals the specified <code>obj</code>.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>Returns whether this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> equals the specified <code>obj</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.
            </summary>
            <returns>Returns the hash code of the object.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateTime.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="P:Skybrud.Essentials.Time.EssentialsDateTime.DateTime"/>.
            </summary>
            <returns>The enumerated constant, <see cref="F:System.TypeCode.DateTime"/>.</returns>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Now">
            <summary>
            Gets a <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> object that is set to the current date and time on this computer,
            expressed as the local time.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.CurrentUnixTimestamp">
            <summary>
            Gets the current UNIX timestamp (amount of seconds since the start of the Unix Epoch).
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Zero">
            <summary>
            Gets an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> representing the start of the Unix Epoch (AKA <code>0</code> seconds).
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Today">
            <summary>
            Gets the current date.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.UtcNow">
            <summary>
            Gets a <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> object that is set to the current date and time on this computer,
            expressed as the Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.DateTime">
            <summary>
            Gets the wrapped <see cref="P:Skybrud.Essentials.Time.EssentialsDateTime.DateTime"/>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Day">
            <summary>
            Returns the day-of-month part of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. The returned value is an integer between
            <code>1</code> and <code>31</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.DayOfWeek">
            <summary>
            Returns the day-of-week part of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. The returned value is an integer between
            <code>0</code> and <code>6</code>, where <code>0</code> indicates <strong>Sunday</strong>, <code>1</code>
            indicates <strong>Monday</strong>, <code>2</code> indicates <strong>Tuesday</strong>, <code>3</code>
            indicates <strong>Wednesday</strong>, <code>4</code> indicates <strong>Thursday</strong>, <code>5</code>
            indicates <strong>Friday</strong>, and <code>6</code> indicates <strong>Saturday</strong>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.DayOfYear">
            <summary>
            Gets the day-of-year part of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. The returned value is an integer between
            <code>1</code> and <code>366</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Hour">
            <summary>
            Gets the hour part of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. The returned value is an integer between
            <code>0</code> and <code>23</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Kind">
            <summary>
            Gets the kind of the underlying <see cref="P:Skybrud.Essentials.Time.EssentialsDateTime.DateTime"/>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Millisecond">
            <summary>
            Gets the millisecond part of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. The returned value is an integer between
            <code>0</code> and <code>999</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Minute">
            <summary>
            Gets the minute part of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. The returned value is an integer between
            <code>0</code> and <code>59</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Month">
            <summary>
            Gets the month part of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. The returned value is an integer between
            <code>1</code> and <code>12</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Second">
            <summary>
            Gets the second part of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. The returned value is an integer between
            <code>0</code> and <code>59</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Ticks">
            <summary>
            Gets the tick count for this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. The returned value is the number of
            100-nanosecond intervals that have elapsed since <code>1/1/0001 12:00am</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.TimeOfDay">
            <summary>
            Gets the time-of-day part of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. The returned value is a
            <see cref="T:System.TimeSpan"/> that indicates the time elapsed since midnight.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Year">
            <summary>
            Returns the year part of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>. The returned value is an integer between
            <code>1</code> and <code>9999</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.UnixTimestamp">
            <summary>
            Gets the UNIX timestamp (amount of seconds since the start of the Unix Epoch) for this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.IsLeapYear">
            <summary>
            Gets whether the year of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is a leap year.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.IsWeekend">
            <summary>
            Gets whether the day of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is within a weekend.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.IsWeekday">
            <summary>
            Gets whether the day of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is a weekday.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.WeekNumber">
            <summary>
            Gets the week number the ISO8601 week of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.Week">
            <summary>
            Gets a reference to an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateWeek"/> representing the ISO8601 week of this
            <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.DaysInMonth">
            <summary>
            Gets the amount of days in the month.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.IsZero">
            <summary>
            Gets whether the Unix timestamp of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is <code>0</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.IsNegative">
            <summary>
            Gets whether the Unix timestamp of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is less than <code>0</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateTime.IsPositive">
            <summary>
            Gets whether the Unix timestamp of this <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> is greater than <code>0</code>.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Time.EssentialsDateWeek">
            <summary>
            Class representing a week as defined by the ISO 8601 specification.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateWeek.#ctor(Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Initialize a new instance based on the specified <code>timestamp</code>.
            </summary>
            <param name="timestamp">A timestamp.</param>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateWeek.Year">
            <summary>
            Gets the year of the week.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateWeek.Week">
            <summary>
            Gets the number of the week.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateWeek.Start">
            <summary>
            Gets a reference to the timestamp representing the start of the week.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateWeek.End">
            <summary>
            Gets a reference to the timestamp representing the end of the week.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Time.EssentialsDateYear">
            <summary>
            Class representing a year in the Gregorian calendar.
            </summary>
            <see>
                <cref>https://en.wikipedia.org/wiki/Gregorian_calendar</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateYear.#ctor(System.Int32)">
            <summary>
            Initializes a new instance from the specified <code>year</code>.
            </summary>
            <param name="year">The year.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateYear.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance from the specified <code>timestamp</code>.
            </summary>
            <param name="timestamp">A timestamp represented by an instance of <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsDateYear.#ctor(Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Initializes a new instance from the specified <code>timestamp</code>.
            </summary>
            <param name="timestamp">A timestamp represented by an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.Year">
            <summary>
            Gets the year of this instance.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.IsLeapYear">
            <summary>
            Gets whether the year is a leap year.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.Days">
            <summary>
            Gets the amount of days in the yeay - <code>366</code> if <see cref="P:Skybrud.Essentials.Time.EssentialsDateYear.IsLeapYear"/> is <code>true</code>, otherwise <code>365</code>.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.PalmSunday">
            <summary>
            Gets the date of <strong>Palm Sunday</strong>, which falls on the Sunday before <strong>Easter</strong>.
            </summary>
            <see>
                <cref>https://en.wikipedia.org/wiki/Palm_Sunday#Observance_in_the_liturgy</cref>
            </see>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.GetMoundyThursday">
            <summary>
            Gets the date of <strong>Moundy Thursday</strong>, which falls on the Thursday before <strong>Easter</strong>.
            </summary>
            <see>
                <cref>https://en.wikipedia.org/wiki/Maundy_Thursday</cref>
            </see>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.GetGoodFriday">
            <summary>
            Gets the date of <strong>Good Friday</strong>, which falls on the Friday before <strong>Easter</strong>.
            </summary>
            <see>
                <cref>https://en.wikipedia.org/wiki/Good_Friday</cref>
            </see>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.GetHolySaturday">
            <summary>
            Gets the date of <strong>Holy Saturday</strong>, which falls on the Saturday before <strong>Easter</strong>.
            </summary>
            <see>
                <cref>https://en.wikipedia.org/wiki/Holy_Saturday</cref>
            </see>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.EasterSunday">
            <summary>
            Gets the date of <strong>Easter Sunday</strong>.
            </summary>
            <see>
                <cref>https://da.wikipedia.org/wiki/Påske#Beregning_af_p.C3.A5skedagens_dato</cref>
            </see>
            <see>
                <cref>https://en.wikipedia.org/wiki/Easter#Date</cref>
            </see>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.EasterMonday">
            <summary>
            Gets the date of <strong>Easter Monday</strong>, which falls on the Monday after <strong>Easter</strong>.
            </summary>
            <see>
                <cref>https://en.wikipedia.org/wiki/Easter_Monday</cref>
            </see>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.StoreBededag">
            <summary>
            Gets the date of <strong>General Prayer Day</strong> (or <code>Store Bededag</code>in Danish) - a national
            holiday in Denmark. It falls on the 4th Friday after <strong>Easter</strong>.
            </summary>
            <see>
                <cref>https://da.wikipedia.org/wiki/Store_bededag</cref>
            </see>
            <see>
                <cref>https://en.wikipedia.org/wiki/Store_Bededag</cref>
            </see>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.AscensionDay">
            <summary>
            Gets the date of <strong>Ascension Day</strong>, which is celebrated on a Thursday, the fortieth day of
            <strong>Easter</strong> (the 6th Thursday after <strong>Moundy Thursday</strong>).
            </summary>
            <see>
                <cref>https://en.wikipedia.org/wiki/Feast_of_the_Ascension</cref>
            </see>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.WhitSunday">
            <summary>
            Gets the date of <strong>Whit Sunday</strong>, which is celebrated on the 7th Sunday after
            <strong>Easter</strong>.
            
            Depending on the year, Whit Sunday falls within the period from the
            <code>10th of May</code> to the <code>13th of June</code> (both inclusive).
            </summary>
            <see>
                <cref>https://en.wikipedia.org/wiki/Whitsun</cref>
            </see>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsDateYear.WhitMonday">
            <summary>
            Gets the date of <strong>Whit Monday</strong>, which is celebrated the day after
            <strong>Whit Sunday</strong>. Whit Sunday is the 7th Sunday after
            <strong>Easter</strong>.
            
            Depending on the year, Whit Monday falls within the period from the <code>11th of May</code> to the
            <code>14th of June</code> (both inclusive).
            </summary>
            <see>
                <cref>https://en.wikipedia.org/wiki/Whit_Monday</cref>
            </see>
        </member>
        <member name="T:Skybrud.Essentials.Time.EssentialsPartialDate">
            <summary>
            Class representing a partial date (eg. only year and month).
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance from the specified <code>date</code>.
            </summary>
            <param name="date">An instance of <see cref="P:Skybrud.Essentials.Time.EssentialsPartialDate.DateTime"/> representing the full date.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance from the specified <code>date</code>.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTimeOffset"/> representing the full date.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.#ctor(Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Initializes a new instance from the specified <code>date</code>.
            </summary>
            <param name="date">An instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/> representing the full date.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.#ctor(System.Int32)">
            <summary>
            Initializes a new instance from the specified <code>year</code>.
            </summary>
            <param name="year">The year of the date.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance from the specified <code>year</code> and <code>month</code>.
            </summary>
            <param name="year">The year of the date.</param>
            <param name="month">The month of the date.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance from the specified <code>year</code>, <code>month</code> and <code>day</code>.
            </summary>
            <param name="year">The year of the date.</param>
            <param name="month">The month of the date.</param>
            <param name="day">The day of the date.</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.ToString">
            <summary>
            Returns a string representation of the partial date in the format of <code>yyyy-MM-dd</code>.
            </summary>
            <returns>A string that represents the partial date.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.Parse(System.String)">
            <summary>
            Parses the specified <code>str</code>. If the string is either <code>null</code> or whitespace,
            <code>null</code> will be returned. The method will parse dates specified in the format
            <code>yyyy-MM-dd</code>. If specified in any other format, an exception will be thrown.
            </summary>
            <param name="str">The string to be parsed.</param>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsPartialDate"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.TryParse(System.String,Skybrud.Essentials.Time.EssentialsPartialDate@)">
            <summary>
            Parses the specified <code>str</code>. If the string is either <code>null</code> or whitespace,
            <code>null</code> will be returned. The method will parse dates specified in the format
            <code>yyyy-MM-dd</code>. If specified in any other format, an exception will be thrown.
            </summary>
            <param name="str">The string to be parsed.</param>
            <param name="date">The parsed date.</param>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsPartialDate"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.op_Implicit(System.DateTime)~Skybrud.Essentials.Time.EssentialsPartialDate">
            <summary>
            Initializes a new instance of <see cref="T:Skybrud.Essentials.Time.EssentialsPartialDate"/> from the specified <code>timestamp</code>.
            </summary>
            <param name="timestamp">An instance of <see cref="P:Skybrud.Essentials.Time.EssentialsPartialDate.DateTime"/>.</param>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsPartialDate"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.op_Implicit(System.DateTimeOffset)~Skybrud.Essentials.Time.EssentialsPartialDate">
            <summary>
            Initializes a new instance of <see cref="T:Skybrud.Essentials.Time.EssentialsPartialDate"/> from the specified <code>timestamp</code>.
            </summary>
            <param name="timestamp">An instance of <see cref="T:System.DateTimeOffset"/>.</param>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsPartialDate"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.EssentialsPartialDate.op_Implicit(Skybrud.Essentials.Time.EssentialsDateTime)~Skybrud.Essentials.Time.EssentialsPartialDate">
            <summary>
            Initializes a new instance of <see cref="T:Skybrud.Essentials.Time.EssentialsPartialDate"/> from the specified <code>timestamp</code>.
            </summary>
            <param name="timestamp">An instance of <see cref="T:Skybrud.Essentials.Time.EssentialsDateTime"/>.</param>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Time.EssentialsPartialDate"/>.</returns>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsPartialDate.Year">
            <summary>
            Gets the year, or <code>0</code> if not specified.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsPartialDate.Month">
            <summary>
            Gets the month, or <code>0</code> if not specified.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsPartialDate.Day">
            <summary>
            Gets the day, or <code>0</code> if not specified.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsPartialDate.DateTime">
            <summary>
            Gets an instance of <see cref="P:Skybrud.Essentials.Time.EssentialsPartialDate.DateTime"/> representing the publication date. This instance will not be
            realiable in the way that an instance of <see cref="P:Skybrud.Essentials.Time.EssentialsPartialDate.DateTime"/> can't represent a partial date.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsPartialDate.HasYear">
            <summary>
            Gets whether a year has been specified for this date.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsPartialDate.HasMonth">
            <summary>
            Gets whether a month has been specified for this date.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsPartialDate.HasDay">
            <summary>
            Gets whether a day has been specified for this date.
            </summary>
        </member>
        <member name="P:Skybrud.Essentials.Time.EssentialsPartialDate.IsPartialDate">
            <summary>
            Gets whether the date is partial (missing either year, month or day).
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Time.Extensions.DateTimeExtensions">
            <summary>
            Static class with various extension methods for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetAge(System.DateTime)">
            <summary>
            Gets the current age, from the specified date of birth.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/> representing the age.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetAge(System.DateTime,System.DateTime)">
            <summary>
            Gets the current age, from the specified date of birth. The age is calculated based on <code>dt</code>.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <param name="dt">The date used for calculating the age.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/> representing the age.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetDayNumberAndSuffix(System.DateTime)">
            <summary>
            Gets the day of the month along with the English ordinal suffix based on the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>The day number and ordinal suffix.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetDaySuffix(System.DateTime)">
            <summary>
            Gets the English ordinal suffix of the day based on the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>The the ordinal suffix.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetIso8601WeekNumber(System.DateTime)">
            <summary>
            Gets the week number of the specified <code>date</code> according to the ISO8601 specification.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/> representing the ISO8601 week number.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.IsWeekday(System.DateTime)">
            <summary>
            Gets whether the specified <code>date</code> is a weekday.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>
            Returns <code>true</code> if <code>date</code> is a weekday; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            Gets whether the specified <code>date</code> is in the weekend.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>
            Returns <code>true</code> if <code>date</code> is in the weekend; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.IsLeapYear(System.DateTime)">
            <summary>
            Gets whether the specified <code>date</code> is a leap year.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>
            Returns <code>true</code> if the year of <code>date</code> is a leap year; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.IsLeapYear(System.Int32)">
            <summary>
            Gets whether the specified year is a leap year.
            </summary>
            <param name="year">The year.</param>
            <returns>
            Returns <code>TRUE</code> if <code>year</code> is a leap year; otherwise <code>FALSE</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetElapsedSeconds(System.DateTime)">
            <summary>
            Gets the amount elapsed seconds since the specified <code>date</code>.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>Returns the elapsed seconds since the input <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.IsDateWithinLastDays(System.DateTime,System.Int32)">
            <summary>
            Returns whether <code>date</code> is within the last number of specified <code>days</code>.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <param name="days">The number of days.</param>
            <returns>
            Returns <code>true</code> if <code>date</code> is within the last number of days, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            Gets the first day of the month of the specified <code>date</code>.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the first day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetLastDayOfMonth(System.DateTime)">
            <summary>
            Gets the last day of the month of the specified <code>date</code>.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the last day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            Gets the first day of the week of the specified <code>date</code>. Monday is considered the first day of the week.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetFirstDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the first day of the week of the specified <code>date</code> and based on <code>startOfWeek</code>.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <param name="startOfWeek">The first day of the week (eg. <see cref="F:System.DayOfWeek.Monday"/> or <see cref="F:System.DayOfWeek.Sunday"/>).</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetLastDayOfWeek(System.DateTime)">
            <summary>
            Gets the last day of the week of the specified <code>date</code>. Monday is considered the first day of the week.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetLastDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
                Gets the last day of the week of the specified <code>date</code> and based on <code>startOfWeek</code>.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <param name="startOfWeek">The first day of the week (eg. <see cref="F:System.DayOfWeek.Monday"/> or <see cref="F:System.DayOfWeek.Sunday"/>).</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetDayName(System.DateTime)">
            <summary>
            Gets the English name of the day.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>Returns the English name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetLocalDayName(System.DateTime)">
            <summary>
            Gets the name of the day according to the current culture.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetLocalDayName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the day according to <code>culture</code>.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <param name="culture">The instance of <see cref="T:System.Globalization.CultureInfo"/> to be used.</param>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetMonthName(System.DateTime)">
            <summary>
            Gets the English name of the month.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>Returns the English name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetLocalMonthName(System.DateTime)">
            <summary>
            Gets the name of the month according to the current culture.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.Extensions.DateTimeExtensions.GetLocalMonthName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the month according to <code>culture</code>.
            </summary>
            <param name="date">An instance of <see cref="T:System.DateTime"/> representing the date.</param>
            <param name="culture">The instance of <see cref="T:System.Globalization.CultureInfo"/> to be used.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Time.TimeUtils">
            <summary>
            Utility class with various static helper methods for working with date and time.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.TimeUtils.Iso8601DateFormat">
            <summary>
            ISO 8601 date format.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetAge(System.DateTime)">
            <summary>
            Gets the current age, from the specified date of birth.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <returns>Returns the age based on the specified date of birth.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetAge(System.DateTime,System.DateTime)">
            <summary>
            Gets the current age, from the specified date of birth. The age is calculated based on <code>dt</code>.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <param name="dt">The date used for calculating the age.</param>
            <returns>Returns the age based on the specified date of birth at the moment of <code>dt</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetAge(System.DateTimeOffset)">
            <summary>
            Gets the current age, from the specified date of birth.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <returns>Returns the age based on the specified date of birth.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetAge(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Gets the current age, from the specified date of birth. The age is calculated based on <code>dt</code>.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <param name="dt">The date used for calculating the age.</param>
            <returns>Returns the age based on the specified date of birth at the moment of <code>dt</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetAge(Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Gets the current age, from the specified date of birth.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <returns>Returns the age based on the specified date of birth.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetAge(Skybrud.Essentials.Time.EssentialsDateTime,Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Gets the current age, from the specified date of birth. The age is calculated based on <code>dt</code>.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <param name="dt">The date used for calculating the age.</param>
            <returns>Returns the age based on the specified date of birth at the moment of <code>dt</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDayNumberAndSuffix(System.DateTime)">
            <summary>
            Gets the day of the month along with the English ordinal suffix based on the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>The day number and ordinal suffix.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDayNumberAndSuffix(System.DateTimeOffset)">
            <summary>
            Gets the day of the month along with the English ordinal suffix based on the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>The day number and ordinal suffix.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDaySuffix(System.DateTime)">
            <summary>
            Gets the English ordinal suffix of the day based on the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>The day ordinal suffix.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDaySuffix(System.DateTimeOffset)">
            <summary>
            Gets the English ordinal suffix of the day based on the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>The day ordinal suffix.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetIso8601WeekNumber(System.DateTime)">
            <summary>
            Gets the week number of <code>date</code> according to the ISO8601 specification.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the <strong>ISO 8601</strong> week number.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/ISO_8601</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetIso8601WeekNumber(System.DateTimeOffset)">
            <summary>
            Gets the week number of <code>date</code> according to the ISO8601 specification.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the <strong>ISO 8601</strong> week number.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/ISO_8601</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.IsWeekday(System.DateTime)">
            <summary>
            Gets whether the specified <code>date</code> is a weekday.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the specified day is weekday; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.IsWeekday(System.DateTimeOffset)">
            <summary>
            Gets whether the specified <code>date</code> is a weekday.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the specified day is weekday; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.IsWeekend(System.DateTime)">
            <summary>
            Gets whether the specified <code>date</code> is in the weekend.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the specified day is weekend; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.IsWeekend(System.DateTimeOffset)">
            <summary>
            Gets whether the specified <code>date</code> is in the weekend.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the specified day is weekend; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.IsLeapYear(System.DateTime)">
            <summary>
            Gets whether the specified <code>date</code> is a leap year.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the year of the specified <code>date</code> is a leap year; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.IsLeapYear(System.DateTimeOffset)">
            <summary>
            Gets whether the specified <code>date</code> is a leap year.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the year of the specified <code>date</code> is a leap year; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.IsLeapYear(System.Int32)">
            <summary>
            Gets whether the specified year is a leap year.
            </summary>
            <param name="year">The year.</param>
            <returns>
            Returns <code>true</code> if the specified year is a leap year; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetElapsedSeconds(System.DateTime)">
            <summary>
            Gets the elapsed seconds since the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the elapsed seconds since <code>date</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetElapsedSeconds(System.DateTimeOffset)">
            <summary>
            Gets the elapsed seconds since the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the elapsed seconds since <code>date</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.IsDateWithinLastDays(System.DateTime,System.Int32)">
            <summary>
            Returns whether <code>date</code> is within the last number of specified <code>days</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="days">The number of days.</param>
            <returns>
            Returns <code>true</code> if the date is within the last number of days, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.IsDateWithinLastDays(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns whether <code>date</code> is within the last number of specified <code>days</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="days">The number of days.</param>
            <returns>
            Returns <code>true</code> if the date is within the last number of days, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            Gets the first day of the month of the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the first day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstDayOfMonth(System.DateTimeOffset)">
            <summary>
            Gets the first day of the month of the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the first day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastDayOfMonth(System.DateTime)">
            <summary>
            Gets the last day of the month of the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the last day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastDayOfMonth(System.DateTimeOffset)">
            <summary>
            Gets the last day of the month of the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the last day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            Gets the first day of the week of the specified <code>date</code>. Monday is considered the first day of
            the week.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstDayOfWeek(System.DateTimeOffset)">
            <summary>
            Gets the first day of the week of the specified <code>date</code>. Monday is considered the first day of
            the week.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the first day of the week of the specified <code>date</code> and based on <code>startOfWeek</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="startOfWeek">The first day of the week (eg. <see cref="F:System.DayOfWeek.Monday"/> or
            <see cref="F:System.DayOfWeek.Sunday"/>).</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstDayOfWeek(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the first day of the week of the specified <code>date</code> and based on <code>startOfWeek</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="startOfWeek">The first day of the week (eg. <see cref="F:System.DayOfWeek.Monday"/> or
            <see cref="F:System.DayOfWeek.Sunday"/>).</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastDayOfWeek(System.DateTime)">
            <summary>
            Gets the last day of the week of the specified <code>date</code>. Monday is considered the first day of
            the week.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastDayOfWeek(System.DateTimeOffset)">
            <summary>
            Gets the last day of the week of the specified <code>date</code>. Monday is considered the first day of
            the week.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the last day of the week of the specified <code>date</code> and based on <code>startOfWeek</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="startOfWeek">The first day of the week (eg. <see cref="F:System.DayOfWeek.Monday"/> or
            <see cref="F:System.DayOfWeek.Sunday"/>).</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastDayOfWeek(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the last day of the week of the specified <code>date</code> and based on <code>startOfWeek</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="startOfWeek">The first day of the week (eg. <see cref="F:System.DayOfWeek.Monday"/> or
            <see cref="F:System.DayOfWeek.Sunday"/>).</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstWeekdayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="date">A date in the month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstWeekdayOfMonth(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="date">A date in the month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstWeekdayOfMonth(System.Int32,Skybrud.Essentials.Time.EssentialsDateMonth,System.DayOfWeek)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstWeekdayOfMonth(System.Int32,Skybrud.Essentials.Time.EssentialsDateMonth,System.DayOfWeek,System.TimeSpan)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstWeekdayOfMonth(System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetFirstWeekdayOfMonth(System.Int32,System.Int32,System.DayOfWeek,System.TimeSpan)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastWeekdayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="date">A date in the month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastWeekdayOfMonth(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="date">A date in the month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastWeekdayOfMonth(System.Int32,Skybrud.Essentials.Time.EssentialsDateMonth,System.DayOfWeek)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastWeekdayOfMonth(System.Int32,Skybrud.Essentials.Time.EssentialsDateMonth,System.DayOfWeek,System.TimeSpan)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastWeekdayOfMonth(System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLastWeekdayOfMonth(System.Int32,System.Int32,System.DayOfWeek,System.TimeSpan)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDayName(System.DateTime)">
            <summary>
            Gets the English name of the day.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the English name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDayName(System.DateTimeOffset)">
            <summary>
            Gets the English name of the day.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the English name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLocalDayName(System.DateTime)">
            <summary>
            Gets the name of the day according to the current culture.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLocalDayName(System.DateTimeOffset)">
            <summary>
            Gets the name of the day according to the current culture.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLocalDayName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the day according to <code>culture</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to be used.</param>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLocalDayName(System.DateTimeOffset,System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the day according to <code>culture</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to be used.</param>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetMonthName(System.DateTime)">
            <summary>
            Gets the English name of the month.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the English name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetMonthName(System.DateTimeOffset)">
            <summary>
            Gets the English name of the month.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the English name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLocalMonthName(System.DateTime)">
            <summary>
            Gets the name of the month according to the current culture.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLocalMonthName(System.DateTimeOffset)">
            <summary>
            Gets the name of the month according to the current culture.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLocalMonthName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the month according to <code>culture</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to be used.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetLocalMonthName(System.DateTimeOffset,System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the month according to <code>culture</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to be used.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.ToIso8601(System.DateTime)">
            <summary>
            Converts the specified <paramref name="timestamp"/> to a string representation as specified by the <strong>ISO 8601</strong> format.
            </summary>
            <param name="timestamp">The timestamp to be converted.</param>
            <returns>The timestamp formatted as a RFC 822 date string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.ToIso8601(System.DateTimeOffset)">
            <summary>
            Converts the specified <paramref name="timestamp"/> to a string representation as specified by the <strong>ISO 8601</strong> format.
            </summary>
            <param name="timestamp">The timestamp to be converted.</param>
            <returns>The timestamp formatted as a RFC 822 date string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.ToIso8601(Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Converts the specified <paramref name="timestamp"/> to a string representation as specified by the <strong>ISO 8601</strong> format.
            </summary>
            <param name="timestamp">The timestamp to be converted.</param>
            <returns>The timestamp formatted as a RFC 822 date string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.Iso8601ToDateTime(System.String)">
            <summary>
            Converts the specified <paramref name="iso8601"/> date to an instance of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="iso8601">The string with the RFC 822 formatted string.</param>
            <returns>An instance of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.Iso8601ToDateTimeOffset(System.String)">
            <summary>
            Converts the specified <paramref name="iso8601"/> date to an instance of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="iso8601">The string with the ISO 8106 formatted string.</param>
            <returns>An instance of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.ToRfc2822(System.DateTime)">
            <summary>
            Converts the specified <paramref name="timestamp"/> to a string representation as specified by the <strong>RFC 2822</strong> format.
            </summary>
            <param name="timestamp">The timestamp to be converted.</param>
            <returns>The timestamp formatted as a RFC 822 date string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.ToRfc2822(System.DateTimeOffset)">
            <summary>
            Converts the specified <paramref name="timestamp"/> to a string representation as specified by the <strong>RFC 2822</strong> format.
            </summary>
            <param name="timestamp">The timestamp to be converted.</param>
            <returns>The timestamp formatted as a RFC 822 date string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.ToRfc2822(Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Converts the specified <paramref name="timestamp"/> to a string representation as specified by the <strong>RFC 2822</strong> format.
            </summary>
            <param name="timestamp">The timestamp to be converted.</param>
            <returns>The timestamp formatted as a RFC 822 date string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.ToRfc822(System.DateTime)">
            <summary>
            Converts the specified <paramref name="timestamp"/> to a string representation as specified by the <strong>RFC 822</strong> format.
            </summary>
            <param name="timestamp">The timestamp to be converted.</param>
            <returns>The timestamp formatted as a RFC 822 date string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.ToRfc822(System.DateTimeOffset)">
            <summary>
            Converts the specified <paramref name="timestamp"/> to a string representation as specified by the <strong>RFC 822</strong> format.
            </summary>
            <param name="timestamp">The timestamp to be converted.</param>
            <returns>The timestamp formatted as a RFC 822 date string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.ToRfc822(Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Converts the specified <paramref name="timestamp"/> to a string representation as specified by the <strong>RFC 822</strong> format.
            </summary>
            <param name="timestamp">The timestamp to be converted.</param>
            <returns>The timestamp formatted as a RFC 822 date string.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.Rfc822ToDateTime(System.String)">
            <summary>
            Converts the specified <paramref name="rfc822"/> date to an instance of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="rfc822">The string with the RFC 822 formatted string.</param>
            <returns>An instance of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.Rfc822ToDateTimeOffset(System.String)">
            <summary>
            Converts the specified <paramref name="rfc822"/> date to an instance of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="rfc822">The string with the RFC 822 formatted string.</param>
            <returns>An instance of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.NormalizeRfc822TimeZone(System.String)">
            <summary>
            The RFC 822 specification describes a number of predefined time zones - eg. <code>EST</code>
            (Eastern Standard Time), <code>UT</code> (Universal Time) and <code>GMT</code>
            (Greenwich Mean Time) - which <see cref="T:System.DateTimeOffset"/> isn't able to parse on it's own,
            so we need to convert the time zone to an offset instead - eg <code>+01:00</code>.
            </summary>
            <param name="timezone">The time zone value to be normalized.</param>
            <returns>Returns the normalized time zone.</returns>
            <see>
                <cref>https://www.w3.org/Protocols/rfc822/#z28</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetCurrentUnixTimestamp">
            <summary>
            Returns the current Unix timestamp which is defined as the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <returns>Returns an instance of <see cref="T:System.Int32"/> representing the current Unix timestamp.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetCurrentUnixTimestampAsDouble">
            <summary>
            Returns the current Unix timestamp which is defined as the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <returns>Returns an instance of <see cref="T:System.Double"/> representing the current Unix timestamp.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDateTimeFromUnixTime(System.Int32)">
            <summary>
            Returns an instance of <see cref="T:System.DateTime"/> based on the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDateTimeFromUnixTime(System.Int64)">
            <summary>
            Returns an instance of <see cref="T:System.DateTime"/> based on the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDateTimeFromUnixTime(System.Double)">
            <summary>
            Returns an instance of <see cref="T:System.DateTime"/> based on the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDateTimeFromUnixTime(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.DateTime"/> based on the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDateTimeOffsetFromUnixTime(System.Int32)">
            <summary>
            Returns an instance of <see cref="T:System.DateTimeOffset"/> based on the amount of seconds since the start of the
            Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDateTimeOffsetFromUnixTime(System.Int64)">
            <summary>
            Returns an instance of <see cref="T:System.DateTimeOffset"/> based on the amount of seconds since the start of the
            Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDateTimeOffsetFromUnixTime(System.Double)">
            <summary>
            Returns an instance of <see cref="T:System.DateTimeOffset"/> based on the amount of seconds since the start of the
            Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetDateTimeOffsetFromUnixTime(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.DateTimeOffset"/> based on the amount of seconds since the start of the
            Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetUnixTimeFromDateTime(System.DateTime)">
            <summary>
            Returns the Unix timestamp for the specified <code>date</code>. The Unix timestamp is defined as the amount
            of seconds since the start of the Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="date">The isntance of <see cref="T:System.DateTime"/> the timestamp should be based on.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/> representing the Unix timestamp.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetUnixTimeFromDateTimeAsDouble(System.DateTime)">
            <summary>
            Returns the Unix timestamp for the specified <code>date</code>. The Unix timestamp is defined as the amount
            of seconds since the start of the Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="date">The isntance of <see cref="T:System.DateTime"/> the timestamp should be based on.</param>
            <returns>Returns an instance of <see cref="T:System.Double"/> representing the Unix timestamp.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetUnixTimeFromDateTimeOffset(System.DateTimeOffset)">
            <summary>
            Returns the Unix timestamp for the specified <code>date</code>. The Unix timestamp is defined as the amount
            of seconds since the start of the Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="date">The isntance of <see cref="T:System.DateTimeOffset"/> the timestamp should be based on.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/> representing the Unix timestamp.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeUtils.GetUnixTimeFromDateTimeOffsetAsDouble(System.DateTimeOffset)">
            <summary>
            Returns the Unix timestamp for the specified <code>date</code>. The Unix timestamp is defined as the amount
            of seconds since the start of the Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="date">The isntance of <see cref="T:System.DateTimeOffset"/> the timestamp should be based on.</param>
            <returns>Returns an instance of <see cref="T:System.Double"/> representing the Unix timestamp.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Time.TimeHelper">
            <summary>
            Utility class with various static helper methods for working with date and time.
            </summary>
        </member>
        <member name="F:Skybrud.Essentials.Time.TimeHelper.Iso8601DateFormat">
            <summary>
            ISO 8601 date format.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetCurrentUnixTimestamp">
            <summary>
            Returns the current Unix timestamp which is defined as the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <returns>Returns an instance of <see cref="T:System.Int32"/> representing the current Unix timestamp.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetCurrentUnixTimestampAsDouble">
            <summary>
            Returns the current Unix timestamp which is defined as the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <returns>Returns an instance of <see cref="T:System.Double"/> representing the current Unix timestamp.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDateTimeFromUnixTime(System.Int32)">
            <summary>
            Returns an instance of <see cref="T:System.DateTime"/> based on the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDateTimeFromUnixTime(System.Int64)">
            <summary>
            Returns an instance of <see cref="T:System.DateTime"/> based on the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDateTimeFromUnixTime(System.Double)">
            <summary>
            Returns an instance of <see cref="T:System.DateTime"/> based on the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDateTimeFromUnixTime(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.DateTime"/> based on the amount of seconds since the start of the Unix
            epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDateTimeOffsetFromUnixTime(System.Int32)">
            <summary>
            Returns an instance of <see cref="T:System.DateTimeOffset"/> based on the amount of seconds since the start of the
            Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDateTimeOffsetFromUnixTime(System.Int64)">
            <summary>
            Returns an instance of <see cref="T:System.DateTimeOffset"/> based on the amount of seconds since the start of the
            Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDateTimeOffsetFromUnixTime(System.Double)">
            <summary>
            Returns an instance of <see cref="T:System.DateTimeOffset"/> based on the amount of seconds since the start of the
            Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDateTimeOffsetFromUnixTime(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.DateTimeOffset"/> based on the amount of seconds since the start of the
            Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="timestamp">The Unix timestamp specified in seconds.</param>
            <returns>Returns the timestamp as an instance of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetUnixTimeFromDateTime(System.DateTime)">
            <summary>
            Returns the Unix timestamp for the specified <code>date</code>. The Unix timestamp is defined as the amount
            of seconds since the start of the Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="date">The isntance of <see cref="T:System.DateTime"/> the timestamp should be based on.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/> representing the Unix timestamp.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetUnixTimeFromDateTimeAsDouble(System.DateTime)">
            <summary>
            Returns the Unix timestamp for the specified <code>date</code>. The Unix timestamp is defined as the amount
            of seconds since the start of the Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="date">The isntance of <see cref="T:System.DateTime"/> the timestamp should be based on.</param>
            <returns>Returns an instance of <see cref="T:System.Double"/> representing the Unix timestamp.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetUnixTimeFromDateTimeOffset(System.DateTimeOffset)">
            <summary>
            Returns the Unix timestamp for the specified <code>date</code>. The Unix timestamp is defined as the amount
            of seconds since the start of the Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="date">The isntance of <see cref="T:System.DateTimeOffset"/> the timestamp should be based on.</param>
            <returns>Returns an instance of <see cref="T:System.Int32"/> representing the Unix timestamp.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetUnixTimeFromDateTimeOffsetAsDouble(System.DateTimeOffset)">
            <summary>
            Returns the Unix timestamp for the specified <code>date</code>. The Unix timestamp is defined as the amount
            of seconds since the start of the Unix epoch - that is <code>1st of January, 1970 - 00:00:00 GMT</code>.
            </summary>
            <param name="date">The isntance of <see cref="T:System.DateTimeOffset"/> the timestamp should be based on.</param>
            <returns>Returns an instance of <see cref="T:System.Double"/> representing the Unix timestamp.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetAge(System.DateTime)">
            <summary>
            Gets the current age, from the specified date of birth.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <returns>Returns the age based on the specified date of birth.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetAge(System.DateTime,System.DateTime)">
            <summary>
            Gets the current age, from the specified date of birth. The age is calculated based on <code>dt</code>.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <param name="dt">The date used for calculating the age.</param>
            <returns>Returns the age based on the specified date of birth at the moment of <code>dt</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetAge(Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Gets the current age, from the specified date of birth.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <returns>Returns the age based on the specified date of birth.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetAge(Skybrud.Essentials.Time.EssentialsDateTime,Skybrud.Essentials.Time.EssentialsDateTime)">
            <summary>
            Gets the current age, from the specified date of birth. The age is calculated based on <code>dt</code>.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <param name="dt">The date used for calculating the age.</param>
            <returns>Returns the age based on the specified date of birth at the moment of <code>dt</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDayNumberAndSuffix(System.DateTime)">
            <summary>
            Gets the day of the month along with the English ordinal suffix based on the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>The day number and ordinal suffix.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDayNumberAndSuffix(System.DateTimeOffset)">
            <summary>
            Gets the day of the month along with the English ordinal suffix based on the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>The day number and ordinal suffix.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDaySuffix(System.DateTime)">
            <summary>
            Gets the English ordinal suffix of the day based on the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>The day ordinal suffix.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDaySuffix(System.DateTimeOffset)">
            <summary>
            Gets the English ordinal suffix of the day based on the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>The day ordinal suffix.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetIso8601WeekNumber(System.DateTime)">
            <summary>
            Gets the week number of <code>date</code> according to the ISO8601 specification.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the <strong>ISO 8601</strong> week number.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/ISO_8601</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetIso8601WeekNumber(System.DateTimeOffset)">
            <summary>
            Gets the week number of <code>date</code> according to the ISO8601 specification.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the <strong>ISO 8601</strong> week number.</returns>
            <see>
                <cref>https://en.wikipedia.org/wiki/ISO_8601</cref>
            </see>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.IsWeekday(System.DateTime)">
            <summary>
            Gets whether the specified <code>date</code> is a weekday.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the specified day is weekday; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.IsWeekday(System.DateTimeOffset)">
            <summary>
            Gets whether the specified <code>date</code> is a weekday.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the specified day is weekday; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.IsWeekend(System.DateTime)">
            <summary>
            Gets whether the specified <code>date</code> is in the weekend.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the specified day is weekend; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.IsWeekend(System.DateTimeOffset)">
            <summary>
            Gets whether the specified <code>date</code> is in the weekend.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the specified day is weekend; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.IsLeapYear(System.DateTime)">
            <summary>
            Gets whether the specified <code>date</code> is a leap year.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the year of the specified <code>date</code> is a leap year; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.IsLeapYear(System.DateTimeOffset)">
            <summary>
            Gets whether the specified <code>date</code> is a leap year.
            </summary>
            <param name="date">The date.</param>
            <returns>
            Returns <code>true</code> if the year of the specified <code>date</code> is a leap year; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.IsLeapYear(System.Int32)">
            <summary>
            Gets whether the specified year is a leap year.
            </summary>
            <param name="year">The year.</param>
            <returns>
            Returns <code>true</code> if the specified year is a leap year; otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetElapsedSeconds(System.DateTime)">
            <summary>
            Gets the elapsed seconds since the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the elapsed seconds since <code>date</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetElapsedSeconds(System.DateTimeOffset)">
            <summary>
            Gets the elapsed seconds since the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the elapsed seconds since <code>date</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.IsDateWithinLastDays(System.DateTime,System.Int32)">
            <summary>
            Returns whether <code>date</code> is within the last number of specified <code>days</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="days">The number of days.</param>
            <returns>
            Returns <code>true</code> if the date is within the last number of days, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.IsDateWithinLastDays(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns whether <code>date</code> is within the last number of specified <code>days</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="days">The number of days.</param>
            <returns>
            Returns <code>true</code> if the date is within the last number of days, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            Gets the first day of the month of the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the first day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstDayOfMonth(System.DateTimeOffset)">
            <summary>
            Gets the first day of the month of the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the first day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastDayOfMonth(System.DateTime)">
            <summary>
            Gets the last day of the month of the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the last day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastDayOfMonth(System.DateTimeOffset)">
            <summary>
            Gets the last day of the month of the specified <code>date</code>.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the last day of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            Gets the first day of the week of the specified <code>date</code>. Monday is considered the first day of
            the week.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstDayOfWeek(System.DateTimeOffset)">
            <summary>
            Gets the first day of the week of the specified <code>date</code>. Monday is considered the first day of
            the week.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the first day of the week of the specified <code>date</code> and based on <code>startOfWeek</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="startOfWeek">The first day of the week (eg. <see cref="F:System.DayOfWeek.Monday"/> or
            <see cref="F:System.DayOfWeek.Sunday"/>).</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstDayOfWeek(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the first day of the week of the specified <code>date</code> and based on <code>startOfWeek</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="startOfWeek">The first day of the week (eg. <see cref="F:System.DayOfWeek.Monday"/> or
            <see cref="F:System.DayOfWeek.Sunday"/>).</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the first day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastDayOfWeek(System.DateTime)">
            <summary>
            Gets the last day of the week of the specified <code>date</code>. Monday is considered the first day of
            the week.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastDayOfWeek(System.DateTimeOffset)">
            <summary>
            Gets the last day of the week of the specified <code>date</code>. Monday is considered the first day of
            the week.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the last day of the week of the specified <code>date</code> and based on <code>startOfWeek</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="startOfWeek">The first day of the week (eg. <see cref="F:System.DayOfWeek.Monday"/> or
            <see cref="F:System.DayOfWeek.Sunday"/>).</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastDayOfWeek(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the last day of the week of the specified <code>date</code> and based on <code>startOfWeek</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="startOfWeek">The first day of the week (eg. <see cref="F:System.DayOfWeek.Monday"/> or
            <see cref="F:System.DayOfWeek.Sunday"/>).</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the last day of the week.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstWeekdayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="date">A date in the month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstWeekdayOfMonth(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="date">A date in the month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstWeekdayOfMonth(System.Int32,Skybrud.Essentials.Time.EssentialsDateMonth,System.DayOfWeek)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstWeekdayOfMonth(System.Int32,Skybrud.Essentials.Time.EssentialsDateMonth,System.DayOfWeek,System.TimeSpan)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstWeekdayOfMonth(System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetFirstWeekdayOfMonth(System.Int32,System.Int32,System.DayOfWeek,System.TimeSpan)">
            <summary>
            Gets the first day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastWeekdayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="date">A date in the month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastWeekdayOfMonth(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="date">A date in the month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastWeekdayOfMonth(System.Int32,Skybrud.Essentials.Time.EssentialsDateMonth,System.DayOfWeek)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastWeekdayOfMonth(System.Int32,Skybrud.Essentials.Time.EssentialsDateMonth,System.DayOfWeek,System.TimeSpan)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastWeekdayOfMonth(System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <returns>Returns an instance of <see cref="T:System.DateTime"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLastWeekdayOfMonth(System.Int32,System.Int32,System.DayOfWeek,System.TimeSpan)">
            <summary>
            Gets the last day of the month that matches <code>dayOfWeek</code>.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The weekday to match.</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
            <returns>Returns an instance of <see cref="T:System.DateTimeOffset"/> representing the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDayName(System.DateTime)">
            <summary>
            Gets the English name of the day.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the English name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetDayName(System.DateTimeOffset)">
            <summary>
            Gets the English name of the day.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the English name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLocalDayName(System.DateTime)">
            <summary>
            Gets the name of the day according to the current culture.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLocalDayName(System.DateTimeOffset)">
            <summary>
            Gets the name of the day according to the current culture.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLocalDayName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the day according to <code>culture</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to be used.</param>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLocalDayName(System.DateTimeOffset,System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the day according to <code>culture</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to be used.</param>
            <returns>Returns the local name of the day.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetMonthName(System.DateTime)">
            <summary>
            Gets the English name of the month.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the English name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetMonthName(System.DateTimeOffset)">
            <summary>
            Gets the English name of the month.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the English name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLocalMonthName(System.DateTime)">
            <summary>
            Gets the name of the month according to the current culture.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLocalMonthName(System.DateTimeOffset)">
            <summary>
            Gets the name of the month according to the current culture.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLocalMonthName(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the month according to <code>culture</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to be used.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Time.TimeHelper.GetLocalMonthName(System.DateTimeOffset,System.Globalization.CultureInfo)">
            <summary>
            Gets the name of the month according to <code>culture</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to be used.</param>
            <returns>Returns the local name of the month.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the first attribute matching the the specified <code>name</code>.
            </summary>
            <param name="element">The instance of <see cref="T:System.Xml.Linq.XElement"/> holding the attribute.</param>
            <param name="name">An instance of <see cref="T:System.Xml.Linq.XName"/> identifying the attribute.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XAttribute"/>, or <code>null</code> if no attributes were matched.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the first attribute matching the the specified XPath <code>expression</code>.
            </summary>
            <param name="element">An instance of <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="expression">The XPath expression to match.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XAttribute"/>, or <code>null</code> if no attributes were matched.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetAttribute(System.Xml.Linq.XElement,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Gets the first attribute matching the the specified XPath <code>expression</code>.
            </summary>
            <param name="element">An instance of <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="expression">The XPath expression to match.</param>
            <param name="resolver">An instance of <see cref="T:System.Xml.IXmlNamespaceResolver"/> for the namespace prefixes in the XPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XAttribute"/>, or <code>null</code> if no attributes were matched.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetAttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the attribute matching the specified <code>name</code>, or <code>null</code> if
            <code>name</code> doesn't match any attributes.
            </summary>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="name">An instance of <see cref="T:System.Xml.Linq.XName"/> identifying the attribute.</param>
            <returns>Returns the value of the attribute, or <code>null</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetAttributeValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the value of the attribute matching the specified <code>expression</code>, or <code>null</code> if the
            expression doesn't match any attributes.
            </summary>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="expression">The XPath expression.</param>
            <returns>Returns the value of the attribute, or <code>null</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetAttributeValue``1(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the value of the attribute matching the specified <code>name</code>.
            </summary>
            <typeparam name="T">The type to be returned.</typeparam>
            <param name="element">The instance of <see cref="T:System.Xml.Linq.XElement"/> holding the attribute.</param>
            <param name="name">An instance of <see cref="T:System.Xml.Linq.XName"/> identifying the attribute.</param>
            <returns>Returns an instance of <code>T</code> represnting the attribute value, or the default value of
            <code>T</code> if not found.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetAttributeValue``2(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{``0,``1})">
            <summary>
            Gets the value of the attribute matching the specified <code>name</code>.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="element">The instance of <see cref="T:System.Xml.Linq.XElement"/> holding the attribute.</param>
            <param name="name">An instance of <see cref="T:System.Xml.Linq.XName"/> identifying the attribute.</param>
            <param name="callback">A callback function for parsing the attribute value.</param>
            <returns>Returns the value as parsed by the specified <code>callback</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElements(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets an array of <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>name</code>.
            </summary>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="name">An instance of <see cref="T:System.Xml.Linq.XName"/> identifying the elements.</param>
            <returns>Returns an array of <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElements(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets an array of <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>expression</code>.
            </summary>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="expression">The XPath expression.</param>
            <returns>Returns an array of <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElements(System.Xml.Linq.XElement,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Gets an array of <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>expression</code>.
            </summary>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="expression">The XPath expression.</param>
            <param name="resolver">An instance of <see cref="T:System.Xml.IXmlNamespaceResolver"/> for the namespace prefixes in the XPath expression.</param>
            <returns>Returns an array of <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElements``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Gets an array of <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>name</code> and parses each element using <code>callback</code>.
            </summary>
            <typeparam name="T">The type of the items to be returned.</typeparam>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="name">An instance of <see cref="T:System.Xml.Linq.XName"/> identifying the elements.</param>
            <param name="callback">A callback function for parsing the element.</param>
            <returns>Returns the elements as parsed by the specified <code>callback</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElements``1(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Gets an array of <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>expression</code> and parses each element using <code>callback</code>.
            </summary>
            <typeparam name="T">The type of the items to be returned.</typeparam>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="expression">The XPath expression.</param>
            <param name="callback">A callback function for parsing the elements.</param>
            <returns>Returns the elements as parsed by the specified <code>callback</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElements``1(System.Xml.Linq.XElement,System.String,System.Xml.IXmlNamespaceResolver,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Gets an array of <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>expression</code> and parses each element using <code>callback</code>.
            </summary>
            <typeparam name="T">The type of the items to be returned.</typeparam>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="expression">The XPath expression.</param>
            <param name="resolver">An instance of <see cref="T:System.Xml.IXmlNamespaceResolver"/> for the namespace prefixes in the XPath expression.</param>
            <param name="callback">A callback function for parsing the elements.</param>
            <returns>Returns the elements as parsed by the specified <code>callback</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets the first <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>name</code>.
            </summary>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="name">An instance of <see cref="T:System.Xml.Linq.XName"/> identifying the element.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XElement"/>, or <code>null</code> if <code>name</code> doesn't match any elements.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElement``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Gets the first <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>name</code> and parses it using <code>callback</code>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="name">An instance of <see cref="T:System.Xml.Linq.XName"/> identifying the element.</param>
            <param name="callback">A callback function for parsing the element.</param>
            <returns>Returns the element as parsed by the specified <code>callback</code>, or <code>null</code> if <code>name</code> doesn't match any elements.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the first <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>expression</code>.
            </summary>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="expression">The XPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XElement"/>, or <code>null</code> if <code>expression</code> doesn't match any elements.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElement``1(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Gets the first <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>expression</code> and parses it using <code>callback</code>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="expression">The XPath expression.</param>
            <param name="callback">A callback function for parsing the element.</param>
            <returns>Returns the element as parsed by the specified <code>callback</code>, or <code>null</code> if <code>name</code> doesn't match any elements.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElement(System.Xml.Linq.XElement,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Gets the first <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>expression</code>.
            </summary>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="expression">The XPath expression.</param>
            <param name="resolver">An instance of <see cref="T:System.Xml.IXmlNamespaceResolver"/> for the namespace prefixes in the XPath expression.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XElement"/>, or <code>null</code> if <code>expression</code> doesn't match any elements.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.Extensions.XElementExtensions.GetElement``1(System.Xml.Linq.XElement,System.String,System.Xml.IXmlNamespaceResolver,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Gets the first <see cref="T:System.Xml.Linq.XElement"/> matching the specified <code>expression</code> and parses it using <code>callback</code>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The parent <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="expression">The XPath expression.</param>
            <param name="resolver">An instance of <see cref="T:System.Xml.IXmlNamespaceResolver"/> for the namespace prefixes in the XPath expression.</param>
            <param name="callback">A callback function for parsing the element.</param>
            <returns>Returns the element as parsed by the specified <code>callback</code>, or <code>null</code> if <code>name</code> doesn't match any elements.</returns>
        </member>
        <member name="T:Skybrud.Essentials.Xml.XmlObjectBase">
            <summary>
            Class representing an object that was parsed from an instance of <see cref="P:Skybrud.Essentials.Xml.XmlObjectBase.XElement"/>.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlObjectBase.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Parses the specified <code>xml</code> into an instance of <see cref="T:Skybrud.Essentials.Xml.XmlObjectBase"/>.
            </summary>
            <param name="xml">The instance of <see cref="P:Skybrud.Essentials.Xml.XmlObjectBase.XElement"/> to be parsed.</param>
            <returns>Returns an instance of <see cref="T:Skybrud.Essentials.Xml.XmlObjectBase"/>.</returns>
        </member>
        <member name="P:Skybrud.Essentials.Xml.XmlObjectBase.XElement">
            <summary>
            Gets the internal <see cref="P:Skybrud.Essentials.Xml.XmlObjectBase.XElement"/> the object was created from.
            </summary>
        </member>
        <member name="T:Skybrud.Essentials.Xml.XmlUtils">
            <summary>
            Static helper methods for working with XML.
            </summary>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlUtils.ParseXmlElement(System.String)">
            <summary>
            Parses the specified <code>xml</code> into an instance of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="xml">The XML to be parsed.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlUtils.ParseXmlElement``1(System.String,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Parses the specified <code>xml</code> into an instance of <see cref="T:System.Xml.Linq.XElement"/>, which is then converted
            into an instance of <code>T</code> using the specified <code>callback</code> function.
            </summary>
            <typeparam name="T">The type of the instance to be returned.</typeparam>
            <param name="xml">The XML to be parsed.</param>
            <param name="callback">The callback function used for converted the parsed <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>Returns an instance of <code>T</code> representing the specified <code>xml</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlUtils.ParseXmlDocument(System.String)">
            <summary>
            Parses the specified <code>xml</code> into an instance of <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <param name="xml">The XML to be parsed.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XDocument"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlUtils.ParseXmlDocument``1(System.String,System.Func{System.Xml.Linq.XDocument,``0})">
            <summary>
            Parses the specified <code>xml</code> into an instance of <see cref="T:System.Xml.Linq.XDocument"/>, which is then converted
            into an instance of <code>T</code> using the specified <code>callback</code> function.
            </summary>
            <typeparam name="T">The type of the instance to be returned.</typeparam>
            <param name="xml">The XML to be parsed.</param>
            <param name="callback">The callback function used for converted the parsed <see cref="T:System.Xml.Linq.XDocument"/>.</param>
            <returns>Returns an instance of <code>T</code> representing the specified <code>xml</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlUtils.LoadXmlElement(System.String)">
            <summary>
            Loads the XML document at specified <code>path</code> and returns it as an instance of
            <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="path">The path to the XML document.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlUtils.LoadXmlElement``1(System.String,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Loads the XML document at specified <code>path</code>, which is then converted into an instance of
            <code>T</code> using the specified <code>callback</code> function.
            </summary>
            <typeparam name="T">The type of the instance to be returned.</typeparam>
            <param name="path">The path to the XML document.</param>
            <param name="callback">The callback function used for converting the loaded <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>Returns an instance of <code>T</code> representing the specified <code>xml</code>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlUtils.LoadXmlDocument(System.String)">
            <summary>
            Loads the XML document at specified <code>path</code> and returns it as an instance of
            <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <param name="path">The path to the XML document.</param>
            <returns>Returns an instance of <see cref="T:System.Xml.Linq.XDocument"/>.</returns>
        </member>
        <member name="M:Skybrud.Essentials.Xml.XmlUtils.LoadXmlDocument``1(System.String,System.Func{System.Xml.Linq.XDocument,``0})">
            <summary>
            Loads the XML document at specified <code>path</code>, which is then converted into an instance of
            <code>T</code> using the specified <code>callback</code> function.
            </summary>
            <typeparam name="T">The type of the instance to be returned.</typeparam>
            <param name="path">The path to the XML document.</param>
            <param name="callback">The callback function used for converting the loaded <see cref="T:System.Xml.Linq.XDocument"/>.</param>
            <returns>Returns an instance of <code>T</code> representing the XML document.</returns>
        </member>
    </members>
</doc>
